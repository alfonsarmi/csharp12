<!--*********************************************************************

   Extended WPF Toolkit

   Copyright (C) 2010-2012 Xceed Software Inc.

   This program is provided to you under the terms of the Microsoft Public
   License (Ms-PL) as published at http://wpftoolkit.codeplex.com/license 

   This program can be provided to you by Xceed Software Inc. under a
   proprietary commercial license agreement for use in non-Open Source
   projects. The commercial version of Extended WPF Toolkit also includes
   priority technical support, commercial updates, and many additional 
   useful WPF controls if you license Xceed Business Suite for WPF.

   Visit http://xceed.com and follow @datagrid on Twitter.

  ********************************************************************-->

<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
	xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes;assembly=Xceed.Wpf.Toolkit"
	xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit">

	<!-- =============================================================================== -->
	<!-- ResourceDictionary for TimePicker and related controls                          -->
	<!-- =============================================================================== -->

	<conv:InverseBoolConverter x:Key="InverseBoolConverter" />
	<conv:TimeFormatToDateTimeFormatConverter x:Key="TimeFormatToDateTimeFormatConverter" />

	<DataTemplate x:Key="DefaultWatermarkTemplate">
		<ContentControl Content="{Binding}" Foreground="Gray" Focusable="False" />
	</DataTemplate>

	<Style x:Key="TimePickerToggleButtonStyle" TargetType="ToggleButton">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid SnapsToDevicePixels="True" Width="17">
						<Border
							x:Name="OutherBorder"
							Grid.ColumnSpan="2"
							CornerRadius="0,4,4,0"
							Margin="0"
							Background="{DynamicResource NormalBrush}"
							BorderBrush="{DynamicResource OutherBorderBrush}"
							BorderThickness="0,1,1,1"/>
						<Border 
							x:Name="ToggleButtonBorder"
							Grid.Column="1"
							CornerRadius="0,3,3,0" 
							Margin="-1,1,1,1"
							Background="Transparent" 
							BorderBrush="{DynamicResource TextBoxBorderBrush}"
							BorderThickness="0,1,1,1" />
						<Path 
							x:Name="Arrow"
							Grid.Column="1"
							Margin="1,2,2,2"
							Fill="{DynamicResource GlyphBrush}"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Data="M 0 0 L 4 4 L 8 0 Z"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="OutherBorder" Property="Background" Value="{DynamicResource HoverBrush}" />
							<Setter TargetName="ToggleButtonBorder" Property="BorderBrush" Value="{DynamicResource HoverBorderBrush}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="OutherBorder" Property="Background" Value="{DynamicResource PressedBackgroundBrush}" />
							<Setter TargetName="ToggleButtonBorder" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
							<Setter TargetName="Arrow" Property="Fill" Value="White" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="ToggleButtonBorder" Property="Opacity" Value="0.5" />
							<Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<SolidColorBrush x:Key="ListItemHover" Color="#FFEEEEEE" />

	<Style x:Key="TimeItemStyle" TargetType="ListBoxItem">
		<Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
		<Setter Property="FontSize" Value="{DynamicResource NormalFontSize}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBoxItem">
					<Border Name="Border" SnapsToDevicePixels="true" Background="Transparent">
						<ContentPresenter Margin="4" HorizontalAlignment="Right"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource ListItemHover}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Border" Property="Background" Value="#777" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =============================================================================== -->
	<!-- TimePicker                                                                      -->
	<!-- =============================================================================== -->

	<Style TargetType="{x:Type local:TimePicker}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
		<Setter Property="FontSize" Value="{DynamicResource NormalFontSize}"/>
		<Setter Property="Validation.ErrorTemplate" Value="{DynamicResource DefaultErrorTemplate}"/>
		<Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
		<Setter Property="Background" Value="White" />
		<Setter Property="Height" Value="22" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:TimePicker}">
					<Border Name="border">
						<Grid>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<local:DateTimeUpDown x:Name="PART_TimeUpDown" 
                                              Background="{TemplateBinding Background}"
                                              Foreground="{TemplateBinding Foreground}"
                                              ContextMenu="{TemplateBinding ContextMenu}"
                                              AllowSpin="{TemplateBinding AllowSpin}"
                                              Format="{TemplateBinding Format, Converter={StaticResource TimeFormatToDateTimeFormatConverter}}"
                                              FormatString="{TemplateBinding FormatString}"
                                              ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
                                              Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                                              Watermark="{TemplateBinding Watermark}"
                                              WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
								<ToggleButton x:Name="_timePickerToggleButton"
                                      Grid.Column="1"
                                      Margin="-1,0,0,0"
                                      IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{StaticResource TimePickerToggleButtonStyle}"
                                      IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" />
							</Grid>
							<Popup IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}" AllowsTransparency="True"
								   StaysOpen="False" PopupAnimation="None" Placement="Bottom" HorizontalAlignment="Stretch">
								<Border BorderThickness="1" CornerRadius="3" Background="{DynamicResource MenuBackground}" BorderBrush="{DynamicResource PopupBorderBrush}">
									<ListBox x:Name="PART_TimeListItems"
											   BorderThickness="0"
											   Width="{TemplateBinding ActualWidth}"
											   Height="130"
											   DisplayMemberPath="Display"
											   ItemContainerStyle="{StaticResource TimeItemStyle}" />
								</Border>
							</Popup>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>