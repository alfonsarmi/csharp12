<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
	xmlns:WpfToolkit="http://schemas.microsoft.com/wpf/2008/toolkit"
	xmlns:components="clr-namespace:Resources.Components"
    x:Class="Resources.Resources.Styles.WPFToolkit.ResourceDictionaries.DMSDataGridResourceDictionary">

	<!--DataGrid Style-->

	<!-- Generic brushes -->
	<SolidColorBrush x:Key="DataGridBorderBrush" Color="#FFF1F1F1"/>
	<SolidColorBrush x:Key="DataGridBackgroundBrush" Color="#FFFFFFFF"/>
	<SolidColorBrush x:Key="DataGridForegroundBrush" Color="#F333"/>

	<!-- DataGrid related brushes -->
	<SolidColorBrush x:Key="GridLineColorBrush" Color="#FFF1F1F1"/>
	<SolidColorBrush x:Key="DataGridRowHoverBrush" Color="#FFF4F4F4"/>
	<SolidColorBrush x:Key="DataGridStrokeBrush" Color="#FFCCCCCC"/>

    <SolidColorBrush x:Key="DataGridSelectedBrush" Color="{DynamicResource BaseColor0}" Opacity="0.3"/>

    <SolidColorBrush x:Key="DataGridSelectedBorder" Color="#777"/>
	<SolidColorBrush x:Key="DataGridSelectedForeground" Color="Black"/>

    <SolidColorBrush x:Key="AlternateRowBackgroundBrush" Color="#FFF4F4F4" Opacity="0.8"/>

	<!-- Header related brushes -->
	<SolidColorBrush x:Key="HeaderBorderBrush" Color="#EEE"/>
	<SolidColorBrush x:Key="HeaderInnerBorderBrush" Color="#FCCC"/>

	<LinearGradientBrush x:Key="HeaderBackgroundBrush" StartPoint="0.5,0.0" EndPoint="0.5,1.0">
		<GradientStop Color="#FFFF" Offset="0"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="HeaderHighlightedBackgoundBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Color="#EEE" Offset="0"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="HeaderPressedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Color="#FDDD" Offset="0"/>
	</LinearGradientBrush>

	<!-- Value converters -->
	<BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />

	<!-- DataGridColumnHeader Right Gripper Style -->
	<Style x:Key="ColumnHeaderRightGripperStyle" TargetType="{x:Type Thumb}">
		<Setter Property="Width" Value="6"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Cursor" Value="SizeWE"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}">
						
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- DataGridColumnHeader Left Gripper Style -->
	<Style x:Key="ColumnHeaderLeftGripperStyle" BasedOn="{StaticResource ColumnHeaderRightGripperStyle}" TargetType="{x:Type Thumb}">
		<Setter Property="Width" Value="9"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Cursor" Value="SizeWE"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Name="Border" 
							UseLayoutRounding="True"
							Padding="{TemplateBinding Padding}" 
							Background="{TemplateBinding Background}">
						<Grid>
							<Line HorizontalAlignment="Right" Stroke="{StaticResource DataGridStrokeBrush}"
								  X1="0" Y1="{Binding ElementName=Border, Path=ActualHeight}"
								  X2="0" Y2="0"/>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- DataGridColumnHeader Style -->
	<Style x:Key="ColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{StaticResource HeaderBackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrush}" />
		<Setter Property="FontWeight" Value="Bold"/>
		<Setter Property="Padding" Value="5,5,0,5"/>
		<Setter Property="AutomationProperties.AutomationId" Value="{Binding Column.SortMemberPath, StringFormat='ColumnHeader_{0}', RelativeSource={RelativeSource Self}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
					<Grid SnapsToDevicePixels="True">
						<Microsoft_Windows_Themes:DataGridHeaderBorder
							x:Name="headerBorder"
							SortDirection="{TemplateBinding SortDirection}"
							IsHovered="{TemplateBinding IsMouseOver}"
							IsPressed="{TemplateBinding IsPressed}"
							IsClickable="{TemplateBinding CanUserSort}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
							SeparatorBrush="{TemplateBinding SeparatorBrush}">
							<Border BorderBrush="{StaticResource HeaderInnerBorderBrush}" BorderThickness="0,0,0,2" SnapsToDevicePixels="True" 
									Padding ="{TemplateBinding Padding}">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition/>
										<ColumnDefinition Width="Auto"/>
									</Grid.ColumnDefinitions>
									<ContentPresenter Margin="0,0,2,0"
										TextElement.FontWeight="{TemplateBinding FontWeight}"
										TextElement.FontSize="{Binding FontSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"
										TextElement.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
									<Path Name="UpArrow" Grid.Column="1" Fill="#FF8F8F8F" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,1,5,0" Visibility="Hidden">
										<Path.Data>
											<PathGeometry>
                                                <PathFigure StartPoint="0,4">
                                                    <LineSegment Point="8,4"/>
                                                    <LineSegment Point="4,0"/>
                                                    <LineSegment Point="0,4"/>
                                                </PathFigure>
											</PathGeometry>
										</Path.Data>
									</Path>
									<Path Name="DownArrow" Grid.Column="1" Fill="#FF8F8F8F" HorizontalAlignment="Left"	VerticalAlignment="Center" Margin="0,1,5,0" Visibility="Hidden">
										<Path.Data>
											<PathGeometry>
                                                <PathFigure StartPoint="0,0">
                                                    <LineSegment Point="8,0"/>
                                                    <LineSegment Point="4,4"/>
                                                    <LineSegment Point="0,0"/>
                                                </PathFigure>
                                            </PathGeometry>
										</Path.Data>
									</Path>
								</Grid>
							</Border>
							</Microsoft_Windows_Themes:DataGridHeaderBorder>

						<Thumb x:Name="PART_LeftHeaderGripper"
							   HorizontalAlignment="Left"
							   Style="{StaticResource ColumnHeaderRightGripperStyle}"/>
						<Thumb x:Name="PART_RightHeaderGripper"
							   HorizontalAlignment="Right"
							   Style="{StaticResource ColumnHeaderLeftGripperStyle}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="headerBorder" Property="Background" 
									Value="{StaticResource HeaderHighlightedBackgoundBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="headerBorder" Property="Background" 
									Value="{StaticResource HeaderPressedBackgroundBrush}" />
						</Trigger>
						<Trigger Property="SortDirection" Value="Descending">
							<Setter TargetName="UpArrow" Property="Visibility" Value="Hidden"/>
							<Setter TargetName="DownArrow" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="SortDirection" Value="Ascending">
							<Setter TargetName="DownArrow" Property="Visibility" Value="Hidden"/>
							<Setter TargetName="UpArrow" Property="Visibility" Value="Visible"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- DataGridRowHeader Gripper -->
	<Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
		<Setter Property="Height" Value="8"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Cursor" Value="SizeNS"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- DataGridRowHeader Style -->
	<Style x:Key="{x:Type DataGridRowHeader}" TargetType="{x:Type DataGridRowHeader}">
		<Setter Property="Background" Value="{StaticResource HeaderBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRowHeader}">
					<Grid>
						<Microsoft_Windows_Themes:DataGridHeaderBorder 
							x:Name="headerBorder"
							IsSelected="{TemplateBinding IsRowSelected}"
							IsHovered ="{TemplateBinding IsMouseOver}"
							IsPressed="{TemplateBinding IsPressed}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding ="{TemplateBinding Padding}"
							Orientation="Horizontal"
							SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
							SeparatorBrush="{TemplateBinding SeparatorBrush}">
							<Border BorderBrush="{StaticResource HeaderInnerBorderBrush}"
									BorderThickness="0,1,0,0">
								<StackPanel Orientation="Horizontal">
									<ContentPresenter
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										VerticalAlignment="Center"/>
									<Control
										SnapsToDevicePixels="false"
										Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=(Validation.HasError), Converter={StaticResource bool2VisibilityConverter}}"
										Template="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=ValidationErrorTemplate}" />
								</StackPanel>
							</Border>
						</Microsoft_Windows_Themes:DataGridHeaderBorder>

						<Thumb x:Name="PART_TopHeaderGripper"
							   VerticalAlignment="Top"
							   Style="{StaticResource RowHeaderGripperStyle}"/>
						<Thumb x:Name="PART_BottomHeaderGripper"
							   VerticalAlignment="Bottom"
							   Style="{StaticResource RowHeaderGripperStyle}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="headerBorder" Property="Background" 
									Value="{StaticResource HeaderHighlightedBackgoundBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="headerBorder" Property="Background" 
									Value="{StaticResource HeaderPressedBackgroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RowHeaderIsModifiedStyle" TargetType="{x:Type DataGridRowHeader}" BasedOn="{StaticResource {x:Type DataGridRowHeader}}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRowHeader}">
					<Grid>
						<Microsoft_Windows_Themes:DataGridHeaderBorder 
							x:Name="headerBorder"
							IsSelected="{TemplateBinding IsRowSelected}"
							IsHovered ="{TemplateBinding IsMouseOver}"
							IsPressed="{TemplateBinding IsPressed}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding ="{TemplateBinding Padding}"
							Orientation="Horizontal"
							SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
							SeparatorBrush="{TemplateBinding SeparatorBrush}">
							<Border BorderBrush="{StaticResource HeaderInnerBorderBrush}" BorderThickness="0,1,0,0">								
									<TextBlock Name="ModifiedIndicator" Text="*" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,0,-2"
											   Visibility="Collapsed" ToolTip="Modified"/>
							</Border>
						</Microsoft_Windows_Themes:DataGridHeaderBorder>

						<Thumb x:Name="PART_TopHeaderGripper"
							   VerticalAlignment="Top"
							   Style="{StaticResource RowHeaderGripperStyle}"/>
						<Thumb x:Name="PART_BottomHeaderGripper"
							   VerticalAlignment="Bottom"
							   Style="{StaticResource RowHeaderGripperStyle}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="headerBorder" Property="Background" 
									Value="{StaticResource HeaderHighlightedBackgoundBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="headerBorder" Property="Background" 
									Value="{StaticResource HeaderPressedBackgroundBrush}" />
						</Trigger>	
						
						<DataTrigger Binding="{Binding IsModified}" Value="true">
							<Setter TargetName="ModifiedIndicator" Property="Visibility" Value="Visible"/>							
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- SelectAllButton ControlTemplate -->
	<ControlTemplate x:Key="SelectAllButtonTemplate" TargetType="{x:Type Button}">
		<Grid>
			<Rectangle x:Name="Border" SnapsToDevicePixels="True"
					   Stroke="{StaticResource HeaderBorderBrush}"
					   Fill="{StaticResource HeaderBackgroundBrush}" />
			<Border SnapsToDevicePixels="True" Margin="0,0,1,0"
					BorderBrush="White" BorderThickness="1,1,0,0" />
			<Polygon x:Name="Arrow"
					 HorizontalAlignment="Right"
					 VerticalAlignment="Bottom"
					 Margin="8,8,4,4"
					 Fill="DarkGray"
					 Stretch="Uniform"
					 Points="0,10 10,10 10,0" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="Border" Property="Fill"
						Value="{StaticResource HeaderHighlightedBackgoundBrush}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter TargetName="Border" Property="Fill"
						Value="{StaticResource HeaderPressedBackgroundBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>


	<!-- DataGrid Style -->
	<!--<Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}">-->
	<Style x:Key="DataGridStyle" TargetType="{x:Type DataGrid}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="HorizontalGridLinesBrush" Value="{StaticResource GridLineColorBrush}" />
		<Setter Property="VerticalGridLinesBrush" Value="{StaticResource GridLineColorBrush}" />
		<Setter Property="AlternatingRowBackground" Value="{StaticResource AlternateRowBackgroundBrush}" />
		<Setter Property="ColumnHeaderStyle" Value="{StaticResource ColumnHeaderStyle}"/>
		<Setter Property="Background" Value="{StaticResource DataGridBackgroundBrush}"/>
		<Setter Property="Foreground" Value="{StaticResource DataGridForegroundBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource DataGridBorderBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="GridLinesVisibility" Value="None" />
		<Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
		<Setter Property="FontSize" Value="{DynamicResource NormalFontSize}"/>
		<!-- This is needed to force DG to have a non-default value.  Otherwise the DGR.DetailsVisibility cannot have a value of VisibleWhenSelected by default. -->
		<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGrid}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="False"
						Padding="{TemplateBinding Padding}">
						<ScrollViewer Focusable="false" Name="DG_ScrollViewer" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}">
							<ScrollViewer.Template>
								<ControlTemplate TargetType="{x:Type ScrollViewer}">
									<Grid>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" MinHeight="20"/>
											<RowDefinition Height="*"/>
											<RowDefinition Height="Auto"/>
										</Grid.RowDefinitions>

										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto"/>
											<ColumnDefinition Width="*"/>
											<ColumnDefinition Width="Auto"/>
										</Grid.ColumnDefinitions>

										<!--Left Column Header Corner -->
										<Button Height="Auto"
											Command="{x:Static DataGrid.SelectAllCommand}"
											Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=CellsPanelHorizontalOffset}"
											Focusable="false"
											Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.All}}" 
											Template="{StaticResource SelectAllButtonTemplate}"/>
										<!--Column Headers-->
										<DataGridColumnHeadersPresenter 
											Grid.Column="1" FontSize="{TemplateBinding FontSize}" MinHeight="20"
											Name="PART_ColumnHeadersPresenter" Margin="-2,0,0,0"
											Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}}"/>

										<!--DataGrid content-->
										<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" />

										<ScrollBar
											Grid.Row="0" Grid.RowSpan="2" Grid.Column="2" Name="PART_VerticalScrollBar"
											Orientation="Vertical"
											Style="{DynamicResource ScrollBarStyle1}"
											Maximum="{TemplateBinding ScrollableHeight}"
											ViewportSize="{TemplateBinding ViewportHeight}"
											Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
											Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>

										<Grid Grid.Row="2" Grid.Column="1">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NonFrozenColumnsViewportHorizontalOffset}"/>
												<ColumnDefinition Width="*"/>
											</Grid.ColumnDefinitions>
											<ScrollBar 
												Grid.Column="1"
												Name="PART_HorizontalScrollBar"
												Orientation="Horizontal"
												Style="{DynamicResource ScrollBarStyle1}"
												Maximum="{TemplateBinding ScrollableWidth}"
												ViewportSize="{TemplateBinding ViewportWidth}"
												Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
												Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
										</Grid>
									</Grid>
								</ControlTemplate>
							</ScrollViewer.Template>
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsGrouping" Value="true">
				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="DimGray"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	<!-- Generic DataGrid -->
	<Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource DataGridStyle}"/>
	<!-- Large DataGrid -->
	<Style x:Key="LargeDataGridStyle" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource DataGridStyle}">
		<Setter Property="FontSize" Value="13"/>
		<Setter Property="FontWeight" Value="Black"/>
		<Setter Property="TextBlock.FontSize" Value="13"/>
		<Setter Property="TextBlock.FontWeight" Value="Black"/>
		<Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
	</Style>

	<!-- DataGrid Row -->
	<Style x:Key="{x:Type DataGridRow}" TargetType="{x:Type DataGridRow}">
		<Style.Resources>
			<LinearGradientBrush x:Key="RowBorderBrush" StartPoint="0,0" EndPoint="0,1">
				<GradientStop Color="#FFFFFFFF" Offset="0"/>
				<GradientStop Color="#FFF7F7F7" Offset="1"/>
			</LinearGradientBrush>
		</Style.Resources>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Foreground" Value="Black"/>
		<Setter Property="BorderBrush" Value="{StaticResource RowBorderBrush}"/>
		<!--<Setter Property="BorderThickness" Value="0,1"/>-->
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<!--<Setter Property="Background" Value="{StaticResource DataGridRowHoverBrush}"/>-->
			</Trigger>
			<Trigger Property="IsSelected" Value="true">
				<Setter Property="BorderBrush" Value="{StaticResource DataGridSelectedBorder}"/>
				<!--<Setter Property="BorderThickness" Value="0,1"/>-->
			</Trigger>
		</Style.Triggers>
	</Style>

    <!-- Collapsable Row Style -->
    <Style x:Key="CollapsableRowStyle" TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}" >
        <Style.Triggers>
            <DataTrigger Binding="{Binding RowIsNotVisible}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- DataGrid Cells Presenter -->
	<Style x:Key="{x:Type DataGridCellsPresenter}" TargetType="{x:Type DataGridCellsPresenter}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="MinHeight" Value="20" />
	</Style>

	<!-- Default DataGridCell Style -->
	<Style x:Key="DefaultCellStyle" TargetType="{x:Type DataGridCell}" >
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource DataGridForegroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Grid Background="{TemplateBinding Background}">
						<ContentPresenter VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=DataGrid}}" Margin="3,0"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Style.Triggers>
			<Trigger Property="IsSelected" Value="true">
				<Setter Property="Background" Value="{StaticResource DataGridSelectedBrush}"/>
				<Setter Property="Foreground" Value="{StaticResource DataGridSelectedForeground}"/>
			</Trigger>
			<!--<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="true"/>
					<Condition Property="IsFocused" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{StaticResource UnfocusedSelectedItemBackground}"/>
				<Setter Property="Foreground" Value="{StaticResource DataGridSelectedForeground}"/>
			</MultiTrigger>-->
		</Style.Triggers>
	</Style>
	<Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource DefaultCellStyle}"/>

	<!-- Right Aligned DataGridCell Style -->
	<Style x:Key="RightAlignedCellStyle" TargetType="{x:Type DataGridCell}" >
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource DataGridForegroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Grid Background="{TemplateBinding Background}">
						<ContentPresenter VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=DataGrid}}" Margin="3,0" HorizontalAlignment="Right" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="true">
				<Setter Property="Background" Value="{StaticResource DataGridSelectedBrush}"/>
				<Setter Property="Foreground" Value="{StaticResource DataGridSelectedForeground}"/>
			</Trigger>
			<!--<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="true"/>
					<Condition Property="IsFocused" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{StaticResource UnfocusedSelectedItemBackground}"/>
				<Setter Property="Foreground" Value="{StaticResource DataGridSelectedForeground}"/>
			</MultiTrigger>-->
		</Style.Triggers>
	</Style>

	<Style x:Key="DataGridCellStyleIsValid" TargetType="{x:Type DataGridCell}" >
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource DataGridForegroundBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Grid Background="{TemplateBinding Background}">
						<ContentPresenter VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=DataGrid}}" Margin="3,0"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="true">
				<Setter Property="Background" Value="{StaticResource DataGridSelectedBrush}"/>
				<Setter Property="Foreground" Value="{StaticResource DataGridSelectedForeground}"/>
			</Trigger>
			<!--DataTriggers-->
			<DataTrigger Binding="{Binding IsValid}" Value="false">
				<Setter Property="Foreground" Value="Crimson" />
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<!-- Right Aligned DataGridColumnHeader Style -->
	<Style x:Key="RightAlignedColumnHeaderStyle"
		   TargetType="{x:Type DataGridColumnHeader}"
		   BasedOn="{StaticResource ColumnHeaderStyle}">
		<Setter Property="HorizontalContentAlignment" Value="Right"/>
	</Style>
	<!-- Center Aligned DataGridColumnHeader Style -->
	<Style x:Key="CenterAlignedColumnHeaderStyle"
		   TargetType="{x:Type DataGridColumnHeader}"
		   BasedOn="{StaticResource ColumnHeaderStyle}">
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
	</Style>

	
	<!-- Super Header Style -->
	<Style x:Key="SuperHeaderStyle" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{StaticResource DataGridStrokeBrush}"/>
		<Setter Property="Background" Value="{StaticResource HeaderBackgroundBrush}"/>
		<Setter Property="Padding" Value="2,4" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid SnapsToDevicePixels="True">
						<Border
							x:Name="OutherBorder"
							CornerRadius="0"
							Background="Transparent"
							BorderBrush="White"
							BorderThickness="0,1,0,0"
							Margin="1,0,1,0"/>
						<Border x:Name="Border"
							Margin="1,1,-2,0"
							CornerRadius="0"
							BorderThickness="1,0,1,0"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HeaderHighlightedBackgoundBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HeaderPressedBackgroundBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
        </Setter>
	</Style>

	<!-- Super Header Style -->
	<Style x:Key="SuperHeaderBehaviorStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource SuperHeaderStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid SnapsToDevicePixels="True">

						<Border x:Name="Border"
							Margin="-1,0,0,0"
							CornerRadius="0"
							BorderThickness="1,0,1,0"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HeaderHighlightedBackgoundBrush}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HeaderPressedBackgroundBrush}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- DataGrid grouping header for frozen column -->
	<Style x:Key="FrozenSuperHeaderStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource SuperHeaderStyle}">
		<Setter Property="Canvas.ZIndex" Value="1" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid SnapsToDevicePixels="True">
						<Border x:Name="Border"
							Margin="0"
							CornerRadius="0"
							BorderThickness="0"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
</ResourceDictionary>