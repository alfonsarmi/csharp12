<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
					xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
                    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" 
					xmlns:controls="clr-namespace:System.Windows.Controls;assembly=PresentationFramework" 
					xmlns:converters="clr-namespace:Resources.Converters" 
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib" 
					mc:Ignorable="PresentationOptions">

	<converters:TreeViewLastLineToBoolConverter x:Key="IsLastLine" />
	<converters:TreeViewLastLineToHeightConverter x:Key="LastLineHeight" />
	<converters:StringToVisibilityConverter x:Key="StringToVisibility" />

	<!--  BasicStyles: Font for Application  -->

	<FontFamily x:Key="DefaultFont">Segoe UI</FontFamily>
	<sys:Double x:Key="ExtraLargeFontSize">15</sys:Double>
	<sys:Double x:Key="LargeFontSize">24</sys:Double>
	<sys:Double x:Key="NormalFontSize">12.1</sys:Double>
	<sys:Double x:Key="SmallFontSize">10</sys:Double>

	<!--  Miscellaneous Brushes and Colors  -->

	<DrawingBrush x:Key="BaseBackground" TileMode="Tile" Viewport="0 0 5 5" ViewportUnits="Absolute" Stretch="None" PresentationOptions:Freeze="True">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<GeometryDrawing Brush="WhiteSmoke">
					<GeometryDrawing.Geometry>
						<RectangleGeometry Rect="0,0,10,10"/>
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
				<GeometryDrawing>
					<GeometryDrawing.Pen>
						<Pen Thickness="1" Brush="#ffe9e9e9" />
					</GeometryDrawing.Pen>
					<GeometryDrawing.Geometry>
						<GeometryGroup>
							<LineGeometry StartPoint="0,0" EndPoint="10,10" />
						</GeometryGroup>
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
				<GeometryDrawing>
					<GeometryDrawing.Pen>
						<Pen Thickness="1" Brush="WhiteSmoke" />
					</GeometryDrawing.Pen>
					<GeometryDrawing.Geometry>
						<GeometryGroup>
							<LineGeometry StartPoint="1,0" EndPoint="10,9" />
						</GeometryGroup>
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>

	<!--<Color x:Key="BaseColor0" PresentationOptions:Freeze="True">#ff949381</Color>-->
	<!--<Color x:Key="BaseColor0" PresentationOptions:Freeze="True">#ff678a8c</Color>-->

	<Color x:Key="BaseColor1" PresentationOptions:Freeze="True">#FFBCD7EC</Color>
	<Color x:Key="BaseColor2" PresentationOptions:Freeze="True">#FF88B2D3</Color>
	<Color x:Key="BaseColor0" PresentationOptions:Freeze="True">#FF5C8FB5</Color>
	<Color x:Key="BaseColor3" PresentationOptions:Freeze="True">#FF3D729B</Color>
	<Color x:Key="BaseColor4" PresentationOptions:Freeze="True">#FF245E8B</Color>


	<SolidColorBrush x:Key="BaseBrush1" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor1}" />
	<SolidColorBrush x:Key="BaseBrush2" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor2}" />
	<SolidColorBrush x:Key="BaseBrush0" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor0}" />
	<SolidColorBrush x:Key="BaseBrush3" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor3}" />
	<SolidColorBrush x:Key="BaseBrush4" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor4}" />


	<SolidColorBrush x:Key="WindowTitleColorBrush" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor0}" />
	<SolidColorBrush x:Key="BlackColorBrush" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor2}" />
	<SolidColorBrush x:Key="HighlightBrush" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor4}" />


	<SolidColorBrush x:Key="TextBrush" PresentationOptions:Freeze="True">#F444</SolidColorBrush>

	<Color x:Key="DisabledColor" PresentationOptions:Freeze="True">Gray</Color>

	<Color x:Key="RedColor" PresentationOptions:Freeze="True">#FFCF2C3F</Color>
	<Color x:Key="BlueColor" PresentationOptions:Freeze="True">#ff4f8cbb</Color>
	<Color x:Key="GreenColor" PresentationOptions:Freeze="True">#ff00a05c</Color>
	<Color x:Key="LightGreenColor" PresentationOptions:Freeze="True">#FF7FFF00</Color>
	<Color x:Key="MediumTurquoiseColor" PresentationOptions:Freeze="True">#FF48D1CC</Color>
	<Color x:Key="OrangeColor" PresentationOptions:Freeze="True">#FFD78E2C</Color>
	<Color x:Key="YellowColor" PresentationOptions:Freeze="True">#FFF1CA54</Color>
	<Color x:Key="GrayColor" PresentationOptions:Freeze="True">#FFA0A0A0</Color>

	<SolidColorBrush x:Key="RedBrush" Color="{StaticResource RedColor}" PresentationOptions:Freeze="True" />
	<SolidColorBrush x:Key="BlueBrush" Color="{StaticResource BlueColor}" PresentationOptions:Freeze="True" />
	<SolidColorBrush x:Key="GreenBrush" Color="{StaticResource GreenColor}" PresentationOptions:Freeze="True" />
	<SolidColorBrush x:Key="LightGreenBrush" Color="{StaticResource LightGreenColor}" PresentationOptions:Freeze="True" />
	<SolidColorBrush x:Key="MediumTurquoiseBrush" Color="{StaticResource MediumTurquoiseColor}" PresentationOptions:Freeze="True" />
	<SolidColorBrush x:Key="OrangeBrush" Color="{StaticResource OrangeColor}" PresentationOptions:Freeze="True" />
	<SolidColorBrush x:Key="YellowBrush" Color="{StaticResource YellowColor}" PresentationOptions:Freeze="True" />
	<SolidColorBrush x:Key="GrayBrush" Color="{StaticResource GrayColor}" PresentationOptions:Freeze="True" />

	<Color x:Key="ErrorColor" PresentationOptions:Freeze="True">Crimson</Color>
	<Color x:Key="WarningColor" PresentationOptions:Freeze="True">DarkGoldenRod</Color>
	<Color x:Key="InfoColor" PresentationOptions:Freeze="True">DarkBlue</Color>
	<Color x:Key="NormalColor" PresentationOptions:Freeze="True">Black</Color>

	<Color x:Key="DarkPressedBackgroundColor" PresentationOptions:Freeze="True">#FF333333</Color>
	<Color x:Key="MiddlePressedBackgroundColor" PresentationOptions:Freeze="True">#FF505050</Color>
	<Color x:Key="LightMiddlePressedBackgroundColor" PresentationOptions:Freeze="True">#FF707070</Color>
	<Color x:Key="LightPressedBackgroundColor" PresentationOptions:Freeze="True">#FFAAAAAA</Color>

	<SolidColorBrush x:Key="SolidBorderBrush" PresentationOptions:Freeze="True" Color="#CCC" />
	<SolidColorBrush x:Key="PopupBorderBrush" PresentationOptions:Freeze="True" Color="#AAA" />
	<SolidColorBrush x:Key="MarkBrush" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor4}" />
	<SolidColorBrush x:Key="HoverBorderBrush" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor0}" />
	<SolidColorBrush x:Key="FocusBorderBrush" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor0}" />
	<SolidColorBrush x:Key="DefaultedBorderBrush" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor0}" />
	<SolidColorBrush x:Key="FocusBackgroundBrush" PresentationOptions:Freeze="True" Color="#FFFAFAFA" />

	<SolidColorBrush x:Key="RemotePointBrush" PresentationOptions:Freeze="True" Color="Yellow" />
	<SolidColorBrush x:Key="TransparentBrush" PresentationOptions:Freeze="True" Color="Transparent" />
	<SolidColorBrush x:Key="SemiTransparentBrush" Opacity="0.5" PresentationOptions:Freeze="True" Color="#FFF" />
	<SolidColorBrush x:Key="WhiteBrush" PresentationOptions:Freeze="True" Color="#FFF" />
	<SolidColorBrush x:Key="SelectedBrush" PresentationOptions:Freeze="True" Color="#FFDDDDDD" />
	<SolidColorBrush x:Key="GlyphBrush" PresentationOptions:Freeze="True" Color="#444" />

	<SolidColorBrush x:Key="HoverMessageViewButtonBorder" PresentationOptions:Freeze="True" Color="#8F808080" />
	<SolidColorBrush x:Key="HoverMessageViewButtonBackground" PresentationOptions:Freeze="True" Color="#1F444444" />
	<SolidColorBrush x:Key="MessageViewButtonBorder" PresentationOptions:Freeze="True" Color="#FF808080" />
	<SolidColorBrush x:Key="MessageViewButtonBackground" PresentationOptions:Freeze="True" Color="#4F808080" />

	<LinearGradientBrush x:Key="TooltipBackground" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="{StaticResource BaseColor0}" Offset="0"/>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="HoverListBoxItemBorder" PresentationOptions:Freeze="True" Color="#1F7080A0" />
	<LinearGradientBrush x:Key="HoverListBoxItemBackground" PresentationOptions:Freeze="True" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0" Color="#1F909090" />
		<GradientStop Offset="1" Color="#1F909090" />
	</LinearGradientBrush>

	<SolidColorBrush x:Key="ListBoxItemBorder" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor0}" />
	<LinearGradientBrush x:Key="ListBoxItemBackground" PresentationOptions:Freeze="True" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Color="{StaticResource BaseColor0}" Offset="0"/>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="UnfocusedSelectedItemBackground" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor0}" />
	<SolidColorBrush x:Key="UnfocusedSelectedItemBorder" PresentationOptions:Freeze="True" Color="{StaticResource BaseColor0}" />

	<LinearGradientBrush x:Key="OutherBorderBrush" PresentationOptions:Freeze="True" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Color="#22FFFFFF" />
		<GradientStop Offset="1" Color="#CCFFFFFF" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="InsetBorderBrush" PresentationOptions:Freeze="True" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0" Color="#FFBBBBBB" />
		<GradientStop Offset="1" Color="White" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="InsetBorderBrushBottom" PresentationOptions:Freeze="True" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0.8" Color="#FFBBBBBB" />
		<GradientStop Offset="1" Color="White" />
	</LinearGradientBrush>

	<!--  ScrollBar  -->

	<SolidColorBrush x:Key="NormalThumb" PresentationOptions:Freeze="True" Color="#C777" />
	<SolidColorBrush x:Key="HoverThumb" PresentationOptions:Freeze="True" Color="#FF919191" />
	<SolidColorBrush x:Key="PressedThumb" PresentationOptions:Freeze="True" Color="#F444" />
	<SolidColorBrush x:Key="DisabledThumb" PresentationOptions:Freeze="True" Color="#8777" />

	<LinearGradientBrush x:Key="ThumbBackground" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Offset="0" Color="#FFFF" />
		<GradientStop Offset="1" Color="#FDDD" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalThumbBackground" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0" Color="#FFFF" />
		<GradientStop Offset="1" Color="#FDDD" />
	</LinearGradientBrush>

	<SolidColorBrush x:Key="TrackBrush" PresentationOptions:Freeze="True" Color="#00222222" />

	<!--  TextBox  -->

	<LinearGradientBrush x:Key="TextBoxBorderBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0.0" Color="#FAAA" />
		<GradientStop Offset="1.0" Color="#FBBB" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="TextBoxBorderBrushBottom" PresentationOptions:Freeze="True" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0.8" Color="#F888" />
		<GradientStop Offset="1" Color="#FEEE" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="AboutBackgroundBrush" PresentationOptions:Freeze="True" StartPoint="0,0.1" EndPoint="0,1">
		<GradientStop Offset="0.1" Color="#FFFF" />
		<GradientStop Offset="0.48" Color="#FFFF" />
		<GradientStop Offset="0.58" Color="#FDDD" />
		<GradientStop Offset="1.0" Color="#FDDD" />
	</LinearGradientBrush>


	<!--  Normal Brush  -->

	<LinearGradientBrush x:Key="NormalBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0.0" Color="#FFFF" />
        <GradientStop Offset="1.0" Color="#FFF4F4F4" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalNormalBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Offset="0.0" Color="#FFFF" />
        <GradientStop Offset="1.0" Color="#FFF4F4F4" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="NormalBrushInverted" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="1.0" Color="#FFF4F4F4" />
        <GradientStop Offset="0.0" Color="#FFFF" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalNormalBrushInverted" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="1.0" Color="#FFF4F4F4" />
        <GradientStop Offset="0.0" Color="#FFFF" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="NormalBorderBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0.0" Color="#FBBB" />
		<GradientStop Offset="1.0" Color="#FAAA" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalNormalBorderBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Offset="0.0" Color="#FBBB" />
		<GradientStop Offset="1.0" Color="#FAAA" />
	</LinearGradientBrush>

	<!--  Disabled Brush  -->

	<SolidColorBrush x:Key="DisabledForegroundBrush" PresentationOptions:Freeze="True" Color="#AA000000" />
	<SolidColorBrush x:Key="DisabledBrush" PresentationOptions:Freeze="True" Color="#FEEE" />
	<SolidColorBrush x:Key="DisabledBorderBrush" PresentationOptions:Freeze="True" Color="#CCC" />

	<LinearGradientBrush x:Key="DisabledBackgroundGradient" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0.0" Color="#FFF4F4F4" />
		<GradientStop Offset="1.0" Color="#FFE1E1E1" />
	</LinearGradientBrush>

	<!--  Light Brush  -->

	<LinearGradientBrush x:Key="LightBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0.0" Color="#FEEE" />
		<GradientStop Offset="1.0" Color="#FDDD" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalLightBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Offset="0.0" Color="#FEEE" />
		<GradientStop Offset="1.0" Color="#FDDD" />
	</LinearGradientBrush>

	<!--  Hover Brush  -->

	<LinearGradientBrush x:Key="HoverBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1" Opacity="0.3">
		<GradientStop Offset="0.0" Color="{StaticResource BaseColor0}"/>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalHoverBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0" Opacity="0.3">
		<GradientStop Offset="0.0" Color="{StaticResource BaseColor0}" />
	</LinearGradientBrush>

	<SolidColorBrush x:Key="HoverToolBarBackgroundBrush" PresentationOptions:Freeze="True" Color="#5FFF" />
	<LinearGradientBrush x:Key="HoverToolBarBorderBrush" PresentationOptions:Freeze="True" Opacity="0.5">
		<GradientStop Color="SlateGray" />
	</LinearGradientBrush>

	<!--  Pressed Brush  -->
	<LinearGradientBrush x:Key="PressedBackgroundBrush" PresentationOptions:Freeze="True" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Color="{StaticResource BaseColor0}" Offset="0"/>
	</LinearGradientBrush>

	<LinearGradientBrush  x:Key="PressedBorderBrush" PresentationOptions:Freeze="True" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Color="{StaticResource BaseColor0}" Offset="0"/>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalPressedBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Color="{StaticResource BaseColor0}" Offset="0"/>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalPressedBorderBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Color="{StaticResource BaseColor0}" Offset="0"/>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalPressedBrush2" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Offset="0.0" Color="#FDDD" />
		<GradientStop Offset="1.0" Color="#FCCC" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="PressedBackgroundBrush2" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0.0" Color="#FDDD" />
		<GradientStop Offset="1.0" Color="#FCCC" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="HorizontalPressedBrush3" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Offset="0.0" Color="#FBBB" />
		<GradientStop Offset="1.0" Color="#FAAA" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="PressedBackgroundBrush3" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0.0" Color="#FBBB" />
		<GradientStop Offset="1.0" Color="#FAAA" />
	</LinearGradientBrush>

	<!--  BasicStyles : Headers  -->

	<Style x:Key="HeaderTextBlockStyle" TargetType="TextBlock">
		<Setter Property="FontSize" Value="22" />
		<Setter Property="FontFamily" Value="Segoe UI" />
		<Setter Property="Foreground" Value="{StaticResource BaseBrush0}" />
	</Style>

	<Style x:Key="SubHeaderTextBlockStyle" TargetType="TextBlock">
		<Setter Property="FontSize" Value="16" />
		<Setter Property="FontFamily" Value="Segoe UI" />
		<Setter Property="Foreground" Value="{StaticResource BaseBrush0}" />
	</Style>

    <Style x:Key="SubHeaderTwoTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Foreground" Value="{StaticResource BaseBrush0}" />
    </Style>

    <Style x:Key="ContentBorderStyle" TargetType="Border">
		<Setter Property="Background" Value="White"/>
		<Setter Property="CornerRadius" Value="0"/>
		<Setter Property="Effect">
			<Setter.Value>
				<DropShadowEffect Opacity="0.1" ShadowDepth="0"/>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles : Control  -->

	<Style TargetType="{x:Type Control}">
		<Setter Property="TextElement.FontSize" Value="{DynamicResource NormalFontSize}" />
		<Setter Property="TextElement.FontFamily" Value="{DynamicResource DefaultFont}" />
	</Style>

	<!--  BasicStyles: AddButton  -->

	<Style x:Key="AddButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Height" Value="16"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Ellipse x:Name="Ellipse" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}"
								Fill="{StaticResource NormalBrush}" UseLayoutRounding="True"
								Stroke="Transparent" StrokeThickness="1"/>
						<TextBlock Text="+" Foreground="Black" FontSize="18" FontWeight="Bold" FontFamily="Courier New" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,1,0,0"/>
						<Ellipse x:Name="BorderHover" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}"
								Fill="{StaticResource HoverBrush}"
								Stroke="{StaticResource HoverBorderBrush}" 
								StrokeThickness="1" Visibility="Collapsed"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="BorderHover" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Ellipse" Property="Fill" Value="{StaticResource PressedBackgroundBrush2}" />
							<Setter TargetName="Ellipse" Property="Stroke" Value="{StaticResource HoverBorderBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Ellipse" Property="Fill" Value="{StaticResource DisabledBackgroundGradient}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: DelButton  -->

	<Style x:Key="DelButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Height" Value="16"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Ellipse x:Name="Ellipse" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}"
								Fill="{StaticResource NormalBrush}" UseLayoutRounding="True"
								Stroke="Transparent" StrokeThickness="1"/>
						<TextBlock Text="-" Foreground="Black" FontSize="18" FontWeight="Bold" FontFamily="Courier New" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,1,0,0"/>
						<Ellipse x:Name="BorderHover" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}"
								Fill="{StaticResource HoverBrush}"
								Stroke="{StaticResource HoverBorderBrush}" 
								StrokeThickness="1" Visibility="Collapsed"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="BorderHover" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Ellipse" Property="Fill" Value="{StaticResource PressedBackgroundBrush2}" />
							<Setter TargetName="Ellipse" Property="Stroke" Value="{StaticResource HoverBorderBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Ellipse" Property="Fill" Value="{StaticResource DisabledBackgroundGradient}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: MoveUpButton  -->

	<Style x:Key="MoveUpButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="Border" Width="16" Height="16"
								Background="{StaticResource NormalBrush}"
								BorderBrush="Transparent" BorderThickness="1" CornerRadius="11">
							<Grid>
								<Path x:Name="TriangleUp" Fill="#222" Data="M4,9 L7,5 L10,9  L4,9"/>
							</Grid>
						</Border>
						<Border x:Name="BorderHover" Width="16" Height="16"
								Background="{StaticResource HoverBrush}"
								BorderBrush="{StaticResource HoverBorderBrush}" 
								BorderThickness="1" CornerRadius="11" Visibility="Collapsed"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="BorderHover" Property="Visibility" Value="Visible" />
							<Setter TargetName="TriangleUp" Property="Fill" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush2}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HoverBorderBrush}" />
							<Setter TargetName="TriangleUp" Property="Fill" Value="Black" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundGradient}" />
							<Setter TargetName="TriangleUp" Property="Fill" Value="#AAA" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: MoveDownButton  -->

	<Style x:Key="MoveDownButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="Border" Width="16" Height="16"
								Background="{StaticResource NormalBrush}"
								BorderBrush="Transparent" BorderThickness="1" CornerRadius="11">
							<Grid>
								<Path x:Name="TriangleDown" Fill="#222" Data="M4,5 L7,9 L10,5  L4,5"/>
							</Grid>
						</Border>
						<Border x:Name="BorderHover" Width="16" Height="16"
								Background="{StaticResource HoverBrush}"
								BorderBrush="{StaticResource HoverBorderBrush}" 
								BorderThickness="1" CornerRadius="11" Visibility="Collapsed"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="BorderHover" Property="Visibility" Value="Visible" />
							<Setter TargetName="TriangleDown" Property="Fill" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush2}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HoverBorderBrush}" />
							<Setter TargetName="TriangleDown" Property="Fill" Value="Black" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundGradient}" />
							<Setter TargetName="TriangleDown" Property="Fill" Value="#AAA" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: ExpandToggleButton  -->

	<Style x:Key="ExpandToggleButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid Width="22" Height="{TemplateBinding Height}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FlashRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.2" />
											<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FlashRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
											<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="FlashRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
											<SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.1" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="90" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
											<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Rectangle x:Name="FlashRectangle" Grid.ColumnSpan="2" Margin="1.334,0,-1.334,0"
						           Fill="#FFFFFFFF" Opacity="0"
						           Stroke="{x:Null}" />
						<Path x:Name="ExpandPath" Width="7" Height="8"
						      HorizontalAlignment="Center" VerticalAlignment="Center" Data="M5.75,10.125 L5.75,25.25 L16.8125,17.813541 z"
						      Fill="DimGray" RenderTransformOrigin="0.5,0.5" Stretch="Fill"
						      Stroke="Black">
							<Path.RenderTransform>
								<TransformGroup>
									<ScaleTransform />
									<SkewTransform />
									<RotateTransform />
									<TranslateTransform />
								</TransformGroup>
							</Path.RenderTransform>
						</Path>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  BasicStyles: ScrollViewer  -->

	<Style x:Key="ScrollViewerBase" TargetType="{x:Type ScrollViewer}">
		<!--
			<Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
			<Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
		-->
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid x:Name="Grid" Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<Rectangle x:Name="Corner" Grid.Row="1" Grid.Column="1" Fill="Transparent" />
						<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0"
						                        Margin="{TemplateBinding Padding}"
						                        CanContentScroll="{TemplateBinding CanContentScroll}"
						                        CanHorizontallyScroll="False" CanVerticallyScroll="False"
						                        Content="{TemplateBinding Content}"
						                        ContentTemplate="{TemplateBinding ContentTemplate}"
						                        FocusVisualStyle="{x:Null}" />
						<ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1"
						           AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow"
						           Maximum="{TemplateBinding ScrollableHeight}"
						           Minimum="0"
						           Style="{DynamicResource ScrollBarStyle1}"
						           ViewportSize="{TemplateBinding ViewportHeight}"
						           Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
						           Value="{Binding VerticalOffset,
						                           Mode=OneWay,
						                           RelativeSource={RelativeSource TemplatedParent}}" />
						<ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0"
						           AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow"
						           Maximum="{TemplateBinding ScrollableWidth}"
						           Minimum="0" Orientation="Horizontal"
						           Style="{DynamicResource ScrollBarStyle1}"
						           ViewportSize="{TemplateBinding ViewportWidth}"
						           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
						           Value="{Binding HorizontalOffset,
						                           Mode=OneWay,
						                           RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ScrollViewerBase}" TargetType="{x:Type ScrollViewer}" />

	<ControlTemplate x:Key="RepeatButtonTemplate" TargetType="{x:Type RepeatButton}">
		<Grid Background="Transparent">
			<Border x:Name="Border" Margin="2" Background="Transparent" BorderBrush="Transparent" CornerRadius="0">
				<Path x:Name="Triangle" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="DarkGray" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="Triangle" Property="Fill" Value="Black" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter TargetName="Triangle" Property="Fill" Value="White" />
				<Setter TargetName="Border" Property="Effect">
					<Setter.Value>
						<DropShadowEffect ShadowDepth="0" BlurRadius="0.1"/>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Triangle" Property="Fill" Value="Silver" />
				<Setter TargetName="Border" Property="Background" Value="Transparent" />
				<Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="ThumbTemplate" TargetType="{x:Type Thumb}">
		<Border Background="Transparent">
			<Border x:Name="HorizontalThumbBorder" Background="DarkGray" Margin="{TemplateBinding Padding}"/>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter TargetName="HorizontalThumbBorder" Property="Background" Value="DimGray" />
			</Trigger>
			<Trigger Property="IsDragging" Value="True">
				<Setter TargetName="HorizontalThumbBorder" Property="Background" Value="DimGray" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="HorizontalThumbBorder" Property="Opacity" Value="0.5" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="ScrollBarStyle1" TargetType="{x:Type ScrollBar}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid Height="16">
								<Grid.ColumnDefinitions>
									<ColumnDefinition MaxWidth="16" />
									<ColumnDefinition Width="1E-05*" />
									<ColumnDefinition MaxWidth="16" />
								</Grid.ColumnDefinitions>
								<Border Grid.ColumnSpan="3" Background="{StaticResource TrackBrush}" CornerRadius="0" />
								<RepeatButton Grid.Column="0" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z">
									<RepeatButton.Style>
										<Style TargetType="{x:Type RepeatButton}">
											<Setter Property="SnapsToDevicePixels" Value="True" />
											<Setter Property="OverridesDefaultStyle" Value="True" />
											<Setter Property="Focusable" Value="False" />
											<Setter Property="Template" Value="{StaticResource RepeatButtonTemplate}"/>
										</Style>
									</RepeatButton.Style>
								</RepeatButton>
								<Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="ScrollBar.PageLeftCommand">
											<RepeatButton.Style>
												<Style TargetType="{x:Type RepeatButton}">
													<Setter Property="SnapsToDevicePixels" Value="True" />
													<Setter Property="OverridesDefaultStyle" Value="True" />
													<Setter Property="IsTabStop" Value="False" />
													<Setter Property="Focusable" Value="False" />
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="{x:Type RepeatButton}">
																<Border Background="Transparent" />
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</RepeatButton.Style>
										</RepeatButton>
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="ScrollBar.PageRightCommand">
											<RepeatButton.Style>
												<Style TargetType="{x:Type RepeatButton}">
													<Setter Property="SnapsToDevicePixels" Value="True" />
													<Setter Property="OverridesDefaultStyle" Value="True" />
													<Setter Property="IsTabStop" Value="False" />
													<Setter Property="Focusable" Value="False" />
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="{x:Type RepeatButton}">
																<Border Background="Transparent" />
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</RepeatButton.Style>
										</RepeatButton>
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Margin="0,1">
											<Thumb.Style>
												<Style TargetType="{x:Type Thumb}">
													<Setter Property="SnapsToDevicePixels" Value="True" />
													<Setter Property="OverridesDefaultStyle" Value="True" />
													<Setter Property="IsTabStop" Value="False" />
													<Setter Property="Focusable" Value="False" />
													<Setter Property="Padding" Value="0,3"/>
													<Setter Property="Template" Value="{StaticResource ThumbTemplate}"/>
												</Style>
											</Thumb.Style>
										</Thumb>
									</Track.Thumb>
								</Track>
								<RepeatButton Grid.Column="3" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z">
									<RepeatButton.Style>
										<Style TargetType="{x:Type RepeatButton}">
											<Setter Property="SnapsToDevicePixels" Value="True" />
											<Setter Property="OverridesDefaultStyle" Value="True" />
											<Setter Property="Focusable" Value="False" />
											<Setter Property="Template" Value="{StaticResource RepeatButtonTemplate}"/>
										</Style>
									</RepeatButton.Style>
								</RepeatButton>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid Width="16">
								<Grid.RowDefinitions>
									<RowDefinition MaxHeight="16" />
									<RowDefinition Height="1E-05*" />
									<RowDefinition MaxHeight="16" />
								</Grid.RowDefinitions>
								<Border Grid.RowSpan="3" Background="{StaticResource TrackBrush}" CornerRadius="0" />
								<RepeatButton Grid.Row="0" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z">
									<RepeatButton.Style>
										<Style TargetType="{x:Type RepeatButton}">
											<Setter Property="SnapsToDevicePixels" Value="True" />
											<Setter Property="OverridesDefaultStyle" Value="True" />
											<Setter Property="Focusable" Value="False" />
											<Setter Property="Template" Value="{StaticResource RepeatButtonTemplate}"/>
										</Style>
									</RepeatButton.Style>
								</RepeatButton>
								<Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="ScrollBar.PageUpCommand">
											<RepeatButton.Style>
												<Style TargetType="{x:Type RepeatButton}">
													<Setter Property="SnapsToDevicePixels" Value="True" />
													<Setter Property="OverridesDefaultStyle" Value="True" />
													<Setter Property="IsTabStop" Value="False" />
													<Setter Property="Focusable" Value="False" />
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="{x:Type RepeatButton}">
																<Border Background="Transparent" />
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</RepeatButton.Style>
										</RepeatButton>
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="ScrollBar.PageDownCommand">
											<RepeatButton.Style>
												<Style TargetType="{x:Type RepeatButton}">
													<Setter Property="SnapsToDevicePixels" Value="True" />
													<Setter Property="OverridesDefaultStyle" Value="True" />
													<Setter Property="IsTabStop" Value="False" />
													<Setter Property="Focusable" Value="False" />
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="{x:Type RepeatButton}">
																<Border Background="Transparent" />
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</RepeatButton.Style>
										</RepeatButton>
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Margin="1,0">
											<Thumb.Style>
												<Style TargetType="{x:Type Thumb}">
													<Setter Property="SnapsToDevicePixels" Value="True" />
													<Setter Property="OverridesDefaultStyle" Value="True" />
													<Setter Property="IsTabStop" Value="False" />
													<Setter Property="Focusable" Value="False" />
													<Setter Property="Padding" Value="3,0"/>
													<Setter Property="Template" Value="{StaticResource ThumbTemplate}"/>
												</Style>
											</Thumb.Style>
										</Thumb>
									</Track.Thumb>
								</Track>
								<RepeatButton Grid.Row="3" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z">
									<RepeatButton.Style>
										<Style TargetType="{x:Type RepeatButton}">
											<Setter Property="SnapsToDevicePixels" Value="True" />
											<Setter Property="OverridesDefaultStyle" Value="True" />
											<Setter Property="Focusable" Value="False" />
											<Setter Property="Template" Value="{StaticResource RepeatButtonTemplate}"/>
										</Style>
									</RepeatButton.Style>
								</RepeatButton>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>


	<!--  Focus Visual  -->

	<Style x:Key="ButtonFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="3" RadiusX="2" RadiusY="2"
						           Stroke="#60000000" StrokeDashArray="1 2" StrokeThickness="1" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ExpanderFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="0" RadiusX="0" RadiusY="0"
						           Stroke="#60000000" StrokeDashArray="1 2" StrokeThickness="1" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: Button  -->

	<Style x:Key="ButtonBase" TargetType="{x:Type Button}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
        <Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="8,0" />
		<Setter Property="Height" Value="24" />
		<Setter Property="Margin" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Border x:Name="Border" Margin="0"
						        Background="{StaticResource NormalBrush}"
						        BorderBrush="{StaticResource NormalBorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
							<ContentPresenter Name="Content" 
											  Margin="{TemplateBinding Padding}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
											  RecognizesAccessKey="True" />
						</Border>
						<Border x:Name="DefaultedBorder" BorderBrush="{StaticResource DefaultedBorderBrush}" Margin="0" BorderThickness="2" CornerRadius="0" Opacity="0"/>
						<Border Name="HoverBorder" Margin="0"
						        Background="{StaticResource HoverBrush}"
						        BorderBrush="{StaticResource HoverBorderBrush}"
						        BorderThickness="0" CornerRadius="0" Opacity="0.9"
						        Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="DefaultedBorder" Property="Opacity" Value="0.5" />
						</Trigger>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter TargetName="DefaultedBorder" Property="Opacity" Value="0.5" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
							<Setter TargetName="HoverBorder" Property="Visibility" Value="Visible" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type Button}" BasedOn="{StaticResource ButtonBase}" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>

	<!--  BasicStyles: ButtonImage  -->

	<Style x:Key="ButtonImageStyle" BasedOn="{StaticResource ButtonBase}" TargetType="{x:Type Button}">
		<Setter Property="Height" Value="17" />
		<Setter Property="Width" Value="17" />
		<Setter Property="Padding" Value="0"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="Border"
					        Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="1" CornerRadius="0" Padding="0"
					        SnapsToDevicePixels="True">
							<Image x:Name="Content" Margin="{TemplateBinding Padding}" Source="{TemplateBinding Content}" />
						</Border>
						<Border x:Name="DefaultedBorder" BorderBrush="{StaticResource DefaultedBorderBrush}" BorderThickness="1" CornerRadius="0" Opacity="0"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter TargetName="DefaultedBorder" Property="Opacity" Value="0.5" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HoverBorderBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: ToggleButton  -->

	<Style x:Key="ToggleButtonBase" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Padding" Value="8,0" />
		<Setter Property="Height" Value="24" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Border x:Name="Border" Margin="0"
						        Background="{StaticResource NormalBrush}"
						        BorderBrush="{StaticResource NormalBorderBrush}"
						        BorderThickness="1" CornerRadius="0"
						        Padding="{TemplateBinding Padding}">
							<ContentPresenter Margin="0,0,0,1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
						</Border>
						<Border x:Name="DefaultedBorder" BorderBrush="{StaticResource DefaultedBorderBrush}" Margin="1" BorderThickness="1" CornerRadius="0" Opacity="0"/>
						<Border Name="HoverBorder" Margin="0"
						        Background="{StaticResource HoverBrush}"
						        BorderBrush="{StaticResource HoverBorderBrush}"
						        BorderThickness="0" CornerRadius="0" Opacity="0.9"
						        Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="DefaultedBorder" Property="Opacity" Value="0.5" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
							<Setter TargetName="HoverBorder" Property="Visibility" Value="Visible" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="true" />
								<Condition Property="IsMouseOver" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Opacity" Value="0.8" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.5" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonBase}" TargetType="{x:Type ToggleButton}">
		<!--  <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>  -->
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>

	<!-- BasicStyles: Custom RadioButtons -->

	<Style x:Key="LeftRadioButtonStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Padding" Value="8,0" />
		<Setter Property="Height" Value="24" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Border x:Name="OutherBorder" Background="Transparent" BorderBrush="{StaticResource OutherBorderBrush}" BorderThickness="1,1,0,1" CornerRadius="0" />
						<Border x:Name="Border" Margin="1,1,0,1"
						        Background="{StaticResource NormalBrush}"
						        BorderBrush="{StaticResource NormalBorderBrush}"
						        BorderThickness="1" CornerRadius="0"
						        Padding="{TemplateBinding Padding}">
							<ContentPresenter Margin="0,0,0,1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
						</Border>
						<Border x:Name="DefaultedBorder" BorderBrush="{StaticResource DefaultedBorderBrush}" Margin="1" BorderThickness="1" CornerRadius="0" Opacity="0"/>
						<Border Name="HoverBorder" Margin="1,1,0,1"
						        Background="{StaticResource HoverBrush}"
						        BorderBrush="{StaticResource HoverBorderBrush}"
						        BorderThickness="2,2,0,2" CornerRadius="0" Opacity="0.3"
						        Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
							<Setter TargetName="HoverBorder" Property="Visibility" Value="Visible" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.5" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MiddleRadioButtonStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Padding" Value="8,0" />
		<Setter Property="Height" Value="24" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Border x:Name="OutherBorder" Background="Transparent" BorderBrush="{StaticResource OutherBorderBrush}" BorderThickness="0,1" CornerRadius="0" />
						<Border x:Name="Border" Margin="0,1"
						        Background="{StaticResource NormalBrush}"
						        BorderBrush="{StaticResource NormalBorderBrush}"
						        BorderThickness="0,1,1,1" CornerRadius="0"
						        Padding="{TemplateBinding Padding}">
							<ContentPresenter Margin="0,0,0,1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
						</Border>
						<Border x:Name="DefaultedBorder" BorderBrush="{StaticResource DefaultedBorderBrush}" Margin="1" BorderThickness="1" CornerRadius="0" Opacity="0"/>
						<Border Name="HoverBorder" Margin="0,1"
						        Background="{StaticResource HoverBrush}"
						        BorderBrush="{StaticResource HoverBorderBrush}"
						        BorderThickness="0,2" CornerRadius="0" Opacity="0.3"
						        Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
							<Setter TargetName="HoverBorder" Property="Visibility" Value="Visible" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.5" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RightRadioButtonStyle" TargetType="{x:Type RadioButton}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Padding" Value="8,0" />
		<Setter Property="Height" Value="24" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Border x:Name="OutherBorder" Background="Transparent" BorderBrush="{StaticResource OutherBorderBrush}" BorderThickness="0,1,1,1" CornerRadius="0" />
						<Border x:Name="Border" Margin="0,1,1,1"
						        Background="{StaticResource NormalBrush}"
						        BorderBrush="{StaticResource NormalBorderBrush}"
						        BorderThickness="0,1,1,1" CornerRadius="0"
						        Padding="{TemplateBinding Padding}">
							<ContentPresenter Margin="0,0,0,1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
						</Border>
						<Border x:Name="DefaultedBorder" BorderBrush="{StaticResource DefaultedBorderBrush}" Margin="1" BorderThickness="1" CornerRadius="0" Opacity="0"/>
						<Border Name="HoverBorder" Margin="0,1,1,1"
						        Background="{StaticResource HoverBrush}"
						        BorderBrush="{StaticResource HoverBorderBrush}"
						        BorderThickness="0,2,2,2" CornerRadius="0" Opacity="0.3"
						        Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
							<Setter TargetName="HoverBorder" Property="Visibility" Value="Visible" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.5" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: MessageViewButtonStyle  -->

	<Style x:Key="MessageViewButtonStyle" BasedOn="{StaticResource ToggleButtonBase}" TargetType="{x:Type ToggleButton}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Padding" Value="10,0"/>
		<Setter Property="Tag" Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid>
						<Border x:Name="OutherBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" CornerRadius="{TemplateBinding Tag}">
							<ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" 
                                              TextBlock.Foreground="{TemplateBinding Foreground}"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="OutherBorder" Property="BorderBrush" Value="{StaticResource HoverMessageViewButtonBorder}" />
							<Setter TargetName="OutherBorder" Property="Background" Value="{StaticResource HoverMessageViewButtonBackground}" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="OutherBorder" Property="BorderBrush" Value="{StaticResource MessageViewButtonBorder}" />
							<Setter TargetName="OutherBorder" Property="Background" Value="{StaticResource MessageViewButtonBackground}" />
							<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="OutherBorder" Property="BorderBrush" Value="{StaticResource MessageViewButtonBorder}" />
							<Setter TargetName="OutherBorder" Property="Background" Value="{StaticResource MessageViewButtonBackground}" />
							<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsChecked" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="OutherBorder" Property="BorderBrush" Value="{StaticResource MessageViewButtonBorder}" />
							<Setter TargetName="OutherBorder" Property="Background" Value="{StaticResource MessageViewButtonBackground}" />
							<Setter Property="Foreground" Value="Black" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: EditToolBoxButtonStyle  -->

	<Style x:Key="EditToolBoxButtonStyle" BasedOn="{StaticResource ToggleButtonBase}" TargetType="{x:Type ToggleButton}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Padding" Value="2"/>
		<Setter Property="Margin" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid>
						<Border x:Name="OutherBorder" Background="{TemplateBinding Background}" BorderThickness="1" CornerRadius="0" Opacity="0.5"/>
						<Border x:Name="OutherBorder2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="0" Opacity="1"/>
						<Image x:Name="Content" Source="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="OutherBorder2" Property="BorderBrush" Value="{StaticResource FocusBorderBrush}" />
							<Setter TargetName="OutherBorder" Property="Background" Value="{StaticResource HoverBrush}" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="OutherBorder2" Property="BorderBrush" Value="{StaticResource FocusBorderBrush}" />
							<Setter TargetName="OutherBorder" Property="Background" Value="{StaticResource FocusBorderBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="OutherBorder2" Property="BorderBrush" Value="{StaticResource FocusBorderBrush}" />
							<Setter TargetName="OutherBorder" Property="Background" Value="{StaticResource FocusBorderBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsChecked" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="OutherBorder2" Property="BorderBrush" Value="{StaticResource FocusBorderBrush}" />
							<Setter TargetName="OutherBorder" Property="Background" Value="{StaticResource FocusBorderBrush}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  Focus Visual  -->

	<Style x:Key="CheckBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="-3,-2,1,-2" RadiusX="1" RadiusY="1"
						           Stroke="#30000000" StrokeDashArray="1 2" StrokeThickness="1" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  BasicStyles: LinkStyle  -->

	<Style x:Key="LinkStyle" TargetType="Button">
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Foreground" Value="MediumBlue" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<TextBlock Name="Text" Background="{TemplateBinding Background}" Text="{TemplateBinding Content}" />
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Text" Property="TextDecorations" Value="Underline" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Foreground" Value="Blue" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RemoveItemButtonStyle" TargetType="Button">
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalAlignment" Value="Right" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid>
						<Ellipse x:Name="Ellipse" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" VerticalAlignment="Center" HorizontalAlignment="Center"
													 Stretch="Fill" StrokeLineJoin="Round" Stroke="#FFC0C0C0" Fill="#FFC0C0C0"/>
						<Canvas  Width="8" Height="8">
							<Path x:Name="Path" Width="8" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
														Stretch="Fill" StrokeLineJoin="Round" Stroke="#FFFFFFFF"
														Fill="#FFFFFFFF" Data="F1 M 0.5,12.2278L 11.7802,0.880646L 152.201,140.473L 140.921,151.82L 0.5,12.2278 Z "/>

							<Path x:Name="Path_0" Width="8" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
														Stretch="Fill" StrokeLineJoin="Round" Stroke="#FFFFFFFF"
														Fill="#FFFFFFFF" Data="F1 M 140.473,0.5L 151.82,11.7802L 12.2278,152.201L 0.880646,140.921L 140.473,0.5 Z "/>
						</Canvas>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Path" Property="Fill" Value="Black" />
							<Setter TargetName="Path_0" Property="Fill" Value="Black" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: CheckBox  -->

	<Style x:Key="CheckBoxBase" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Validation.ErrorTemplate" Value="{DynamicResource DefaultErrorTemplate}" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" Padding="{TemplateBinding Padding}">
						<BulletDecorator VerticalAlignment="Center">
							<BulletDecorator.Bullet>
								<Grid>
									<Border x:Name="Border" Width="13" Height="13"
								        Background="{StaticResource WhiteBrush}"
								        BorderBrush="{StaticResource TextBoxBorderBrush}"
								        BorderThickness="1" CornerRadius="0">
										<Canvas Width="10" Height="10">
											<Path x:Name="CheckMark"
										      Width="9.75" Margin="0" Fill="{StaticResource MarkBrush}"
										      HorizontalAlignment="Stretch" Data="M-4.6163481,4.3266506 L-2.8758386,5.8522606 -7.9533463,13.061446 -11.362237,9.7692092 -9.9838138,7.8107349 -8.1704808,9.5608609 z" 
										      RenderTransformOrigin="0,0" Stretch="Fill" StrokeThickness="0"
										      Visibility="Visible" Height="8.734" Canvas.Top="0.328" Canvas.Left="0.083"/>
											<Rectangle x:Name="RectMark" Width="4.93" Height="4.93"
										           Margin="2.7" Fill="{StaticResource MarkBrush}" Visibility="Hidden" />
										</Canvas>
									</Border>
									<Border x:Name="BorderHover" Width="13" Height="13"
											Visibility="Collapsed"
											Background="{StaticResource HoverBrush}"
											BorderBrush="{StaticResource HoverBorderBrush}"
											BorderThickness="1" CornerRadius="0" />
								</Grid>
							</BulletDecorator.Bullet>
							<ContentPresenter Name="Content" Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" RecognizesAccessKey="True" />
						</BulletDecorator>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource FocusBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource FocusBorderBrush}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="false">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
							<Setter TargetName="RectMark" Property="Visibility" Value="Hidden" />
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
							<Setter TargetName="RectMark" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="BorderHover" Property="Visibility" Value="Visible" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush2}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.5" />
							<Setter TargetName="Content" Property="Opacity" Value="0.5" />
							<Setter TargetName="CheckMark" Property="Fill" Value="Gray"/>
							<Setter TargetName="RectMark" Property="Fill" Value="Gray"/>
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type CheckBox}" BasedOn="{StaticResource CheckBoxBase}" TargetType="{x:Type CheckBox}">
		<Setter Property="Margin" Value="1,5,1,4" />
	</Style>

	<Style x:Key="CheckBoxMarkOnly" TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Foreground" Value="#FF333333" />
		<Setter Property="IsEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
						<BulletDecorator VerticalAlignment="Center">
							<BulletDecorator.Bullet>
								<Border x:Name="Border" Width="13" Height="13" BorderThickness="1" CornerRadius="0">
									<Canvas Width="10" Height="10">
										<Path x:Name="CheckMark"
										      Width="9.75" Margin="0"
										      HorizontalAlignment="Stretch" Data="M-4.6163481,4.3266506 L-2.8758386,5.8522606 -7.9533463,13.061446 -11.362237,9.7692092 -9.9838138,7.8107349 -8.1704808,9.5608609 z" 
											  Fill="{TemplateBinding Foreground}"
										      RenderTransformOrigin="0,0" Stretch="Fill" StrokeThickness="0"
										      Visibility="Visible" Height="8.734" Canvas.Top="0.328" Canvas.Left="0.083"/>
										<Rectangle x:Name="RectMark" Width="4.93" Height="4.93"
										           Margin="2.7" Fill="Black" Visibility="Hidden" />
									</Canvas>
								</Border>
							</BulletDecorator.Bullet>
							<ContentPresenter Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" RecognizesAccessKey="True" />
						</BulletDecorator>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
							<Setter TargetName="RectMark" Property="Visibility" Value="Hidden" />
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
							<Setter TargetName="RectMark" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  BasicStyles: Expander  -->

	<ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
		<Border Name="Border" Background="{TemplateBinding Background}" BorderThickness="0" CornerRadius="0" SnapsToDevicePixels="True">
			<Grid MinHeight="20">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="20" />
					<ColumnDefinition Width="*" />
				</Grid.ColumnDefinitions>
				<Path Name="Arrow" Width="8" Height="8"
				      Margin="2,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"
				      Data="M5.2,4 L0,8 0,0 z"
				      Fill="{StaticResource GlyphBrush}"
				      RenderTransformOrigin="0.4,0.5" />
				<ContentPresenter Grid.Column="1" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="FocusVisualStyle" Value="{StaticResource ExpanderFocusVisual}" />
			</Trigger>
			<Trigger Property="ToggleButton.IsMouseOver" Value="true">
				<Setter TargetName="Border" Property="Background" Value="#88EEEEEE" />
				<Setter Property="Foreground" Value="Black"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter TargetName="Border" Property="Background" Value="#FEEE" />
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter TargetName="Arrow" Property="RenderTransform">
					<Setter.Value>
						<TransformGroup>
							<ScaleTransform />
							<SkewTransform />
							<RotateTransform Angle="90" />
							<TranslateTransform />
						</TransformGroup>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
				<Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Name="ContentRow" Height="0" />
							</Grid.RowDefinitions>
							<ToggleButton AutomationProperties.AutomationId="{Binding (AutomationProperties.AutomationId), StringFormat='Expander_{0}', RelativeSource={RelativeSource AncestorType=Expander}}" 
										  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
										  OverridesDefaultStyle="True" 
										  Template="{StaticResource ExpanderToggleButton}"
										  Background="{TemplateBinding BorderBrush}"
										  Height="{TemplateBinding Height}">
								<ContentPresenter Grid.Column="1" Margin="0" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
							</ToggleButton>
							<ContentPresenter Grid.Row="1" Margin="{TemplateBinding Padding}"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="True">
							<Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=DesiredHeight}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ExpanderStyle}" TargetType="{x:Type Expander}" />

	<!--  BasicStyles: GroupBox  -->

	<BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
	<Style x:Key="GroupBoxBase" TargetType="{x:Type GroupBox}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="BorderBrush" Value="Gainsboro" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
		<Setter Property="Padding" Value="10" />
		<Setter Property="Margin" Value="2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="3" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" MinWidth="10"/>
							<ColumnDefinition Width="3" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" MinHeight="2" />
							<RowDefinition Height="Auto" MinHeight="2" />
							<RowDefinition Height="*" />
							<RowDefinition Height="3" />
						</Grid.RowDefinitions>
						<Border Grid.Row="1" Grid.RowSpan="3" Grid.Column="0"
						        Grid.ColumnSpan="4"
						        Background="{TemplateBinding Background}"
						        BorderBrush="Transparent"
						        BorderThickness="{TemplateBinding BorderThickness}"
						        CornerRadius="0" />
						<ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" TextElement.Foreground="{StaticResource TextBrush}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<Border Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"
						        BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}"
						        CornerRadius="0">
							<Border.OpacityMask>
								<MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
									<Binding ElementName="Header" Path="ActualWidth" />
									<Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
									<Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
								</MultiBinding>
							</Border.OpacityMask>
						</Border>
						<Border x:Name="Header" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" Padding="10,0,2,0">
							<ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
											  TextElement.Foreground="{DynamicResource TextBrush}" />
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="{DynamicResource SEDisabledOpacity}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style BasedOn="{StaticResource GroupBoxBase}" TargetType="{x:Type GroupBox}" />

	<!--  BasicStyles: Label  -->

	<Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Margin" Value="1,0,4,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<ContentPresenter Margin="{TemplateBinding Margin}" 
									  TextBlock.FontFamily="{TemplateBinding FontFamily}"
									  TextBlock.FontSize="{TemplateBinding FontSize}"
									  TextBlock.Foreground="{TemplateBinding Foreground}"
									  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
									  RecognizesAccessKey="True" />
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: ListBox  -->

	<Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{StaticResource SolidBorderBrush}" />
		<Setter Property="Background" Value="White" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="Validation.ErrorTemplate" Value="{DynamicResource DefaultErrorTemplate}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Grid>
						<!--<Border x:Name="OutherBorder" Background="Transparent" BorderBrush="{StaticResource OutherBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" />-->
						<Border x:Name="Border"
						        Background="{TemplateBinding Background}"
						        BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}"
						        CornerRadius="0">
							<ScrollViewer Focusable="false">
								<ItemsPresenter Margin="{TemplateBinding Padding}" />
							</ScrollViewer>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.7" />
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource ListBoxStyle}"/>

	<Style x:Key="ListBoxNonScrollable" TargetType="{x:Type ListBox}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{StaticResource SolidBorderBrush}" />
		<Setter Property="Background" Value="White" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="Validation.ErrorTemplate" Value="{DynamicResource DefaultErrorTemplate}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Grid>
						<!--<Border x:Name="OutherBorder" Background="Transparent" BorderBrush="{StaticResource OutherBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" />-->
						<Border x:Name="Border" Margin="1"
						        Background="{TemplateBinding Background}"
						        BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}"
						        CornerRadius="0">
							<ItemsPresenter Margin="{TemplateBinding Padding}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.7" />
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: ListBoxItem  -->

	<Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Padding" Value="4,1" />
		<Setter Property="MinHeight" Value="20" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid>
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="1" CornerRadius="0" />
						<ContentPresenter Name="Content" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverListBoxItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HoverListBoxItemBorder}" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ListBoxItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ListBoxItemBorder}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="IsFocused" Value="false" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource UnfocusedSelectedItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UnfocusedSelectedItemBorder}" />
							<Setter Property="Foreground" Value="White" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.2" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemStyle}" TargetType="{x:Type ListBoxItem}" />

	<Style x:Key="DarkListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Background" Value="#DDD" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Padding" Value="4,1" />
		<Setter Property="MinHeight" Value="20" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid>
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="1" CornerRadius="0" />
						<ContentPresenter Name="Content" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="#5F808080" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HoverListBoxItemBorder}" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ListBoxItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ListBoxItemBorder}" />
							<Setter Property="FontWeight" Value="Bold"/>
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsSelected" Value="False">
							<Setter Property="FontWeight" Value="Normal"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="IsFocused" Value="false" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource UnfocusedSelectedItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UnfocusedSelectedItemBorder}" />
							<Setter Property="Foreground" Value="White" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Opacity" Value="0.2" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  BasicStyles : RadioButtonListBox  -->

	<Style x:Key="RadioButtonList" TargetType="ListBox">
		<Style.Resources>
			<Style TargetType="Label">
				<Setter Property="Padding" Value="0" />
			</Style>
		</Style.Resources>
		<Setter Property="SelectedValuePath" Value="Tag" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource RadioButtonListItem}" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="TextBlock.Foreground" Value="Silver" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="HorizontalRadioButtonList" BasedOn="{StaticResource RadioButtonList}" TargetType="ListBox">
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<VirtualizingStackPanel Background="Transparent" Orientation="Horizontal" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="RadioButtonListItem" TargetType="{x:Type ListBoxItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBoxItem">
					<DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Center" Background="{TemplateBinding Background}" LastChildFill="True">
						<RadioButton Margin="0,0,4,0" VerticalAlignment="Center" Focusable="False" IsChecked="{TemplateBinding IsSelected}" IsHitTestVisible="False" />
						<ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
						                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
						                  Content="{TemplateBinding ContentControl.Content}"
						                  ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
						                  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
						                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  BasicStyles: ListView  -->

	<Style x:Key="{x:Static controls:GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ScrollViewer">
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>

						<DockPanel Margin="{TemplateBinding Padding}">
							<ScrollViewer DockPanel.Dock="Top" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
								<GridViewHeaderRowPresenter Margin="0"
								                            AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder,
								                                                          RelativeSource={RelativeSource TemplatedParent}}"
								                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle,
								                                                                 RelativeSource={RelativeSource TemplatedParent}}"
								                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu,
								                                                              RelativeSource={RelativeSource TemplatedParent}}"
								                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate,
								                                                           RelativeSource={RelativeSource TemplatedParent}}"
								                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector,
								                                                                   RelativeSource={RelativeSource TemplatedParent}}"
								                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip,
								                                                          RelativeSource={RelativeSource TemplatedParent}}"
								                            Columns="{Binding Path=TemplatedParent.View.Columns,
								                                              RelativeSource={RelativeSource TemplatedParent}}"
								                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>

							<ScrollContentPresenter Name="PART_ScrollContentPresenter" CanContentScroll="True" CanHorizontallyScroll="False" CanVerticallyScroll="False" KeyboardNavigation.DirectionalNavigation="Local" />
						</DockPanel>

						<ScrollBar Name="PART_HorizontalScrollBar" Grid.Row="1"
						           Maximum="{TemplateBinding ScrollableWidth}"
						           Orientation="Horizontal"
						           Style="{DynamicResource ScrollBarStyle1}"
						           ViewportSize="{TemplateBinding ViewportWidth}"
						           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
						           Value="{TemplateBinding HorizontalOffset}" />

						<ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1"
						           Maximum="{TemplateBinding ScrollableHeight}"
						           Style="{DynamicResource ScrollBarStyle1}"
						           ViewportSize="{TemplateBinding ViewportHeight}"
						           Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
						           Value="{TemplateBinding VerticalOffset}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
		<Setter Property="Width" Value="18" />
		<Setter Property="Background" Value="{StaticResource DisabledBorderBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Background="Transparent" Padding="{TemplateBinding Padding}">
						<Rectangle Width="1" HorizontalAlignment="Center" Fill="{TemplateBinding Background}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type GridViewColumnHeader}" TargetType="GridViewColumnHeader">
		<Style.Resources>
			<SolidColorBrush x:Key="HeaderBottomBrush">#BBB</SolidColorBrush>
			<LinearGradientBrush x:Key="HeaderBackgroundBrush" StartPoint="0.5,0.0" EndPoint="0.5,1.0">
				<GradientStop Offset="0" Color="#FFF7F7F7" />
				<GradientStop Offset="1" Color="#FFE1E1E1" />
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="HeaderHighlightedBackgoundBrush" StartPoint="0,0" EndPoint="0,1">
				<GradientStop Offset="0" Color="#FEEE" />
				<GradientStop Offset="1.0" Color="#CCC" />
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="HeaderPressedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
				<GradientStop Offset="0" Color="#CCC" />
				<GradientStop Offset="1" Color="#FEEE" />
			</LinearGradientBrush>
		</Style.Resources>
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Bottom" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="GridViewColumnHeader">
					<Grid>
						<Border Name="HeaderBorder" Height="20"
						        Background="{StaticResource HeaderBackgroundBrush}"
						        BorderBrush="{StaticResource HeaderBottomBrush}"
						        BorderThickness="0,0,0,1" Padding="4,0,4,0">
							<ContentPresenter Name="HeaderContent" Margin="0,0,0,2"
							                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							                  RecognizesAccessKey="True"
							                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<Thumb x:Name="PART_HeaderGripper" Margin="0,0,-9,0" HorizontalAlignment="Right" IsEnabled="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type ListView}}, FallbackValue=True}" Style="{StaticResource GridViewColumnHeaderGripper}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="HeaderBorder" Property="Background" Value="{StaticResource HeaderHighlightedBackgoundBrush}" />
							<Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{StaticResource HoverMessageViewButtonBorder}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="HeaderBorder" Property="Background" Value="{StaticResource HeaderPressedBackgroundBrush}" />
							<Setter TargetName="HeaderContent" Property="Margin" Value="1,0,0,1" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Role" Value="Floating">
				<Setter Property="Opacity" Value="0.7" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="GridViewColumnHeader">
							<Canvas Name="PART_FloatingHeaderCanvas">
								<Rectangle Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Fill="#60000000" />
							</Canvas>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Role" Value="Padding">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="GridViewColumnHeader">
							<Border Name="HeaderBorder" Background="{StaticResource HeaderBackgroundBrush}" BorderBrush="{StaticResource HeaderBottomBrush}" BorderThickness="0,0,0,1" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="{x:Type ListView}" TargetType="ListView">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{StaticResource WhiteBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListView">
					<Border Name="Border" Background="{TemplateBinding Background}" BorderBrush="{StaticResource DisabledBorderBrush}" BorderThickness="1">
						<ScrollViewer Style="{DynamicResource {x:Static controls:GridView.GridViewScrollViewerStyleKey}}">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBorderBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: ListViewItem  -->

	<Style x:Key="ListViewItemStyle" TargetType="ListViewItem">
		<Setter Property="ListViewItem.Background" Value="LightYellow" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Background" Value="{StaticResource WhiteBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<Border Name="Border" Background="{TemplateBinding Background}" BorderBrush="#FEEE" BorderThickness="0,0,0,1" Padding="0">
						<GridViewRowPresenter Name="Content" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ListBoxItemBackground}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="Selector.IsSelectionActive" Value="false" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource UnfocusedSelectedItemBackground}" />
							<Setter Property="Foreground" Value="White" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Content" Property="Opacity" Value="0.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource ListViewItemStyle}" TargetType="ListViewItem" />


	<!--  BasicStyles: ProgressBar  -->

	<Style x:Key="ProgressBarBase" TargetType="{x:Type ProgressBar}">
		<Style.Resources>
			<SolidColorBrush x:Key="IndicatorBrush">#FFF</SolidColorBrush>
		</Style.Resources>
		<Setter Property="Height" Value="15" />
		<Setter Property="Margin" Value="8,0,8,8" />
		<Setter Property="Foreground" Value="{StaticResource IndicatorBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Border Background="#999" CornerRadius="0">
						<DockPanel x:Name="PART_Track" LastChildFill="False">
							<Rectangle x:Name="PART_Indicator" RadiusX="2" RadiusY="2" Margin="2">
								<Rectangle.Fill>
									<MultiBinding UpdateSourceTrigger="Default">
										<MultiBinding.Converter>
											<Microsoft_Windows_Themes:ProgressBarBrushConverter />
										</MultiBinding.Converter>
										<Binding Path="Foreground" RelativeSource="{RelativeSource TemplatedParent}" />
										<Binding Path="IsIndeterminate" RelativeSource="{RelativeSource TemplatedParent}" />
										<Binding ElementName="PART_Indicator" Path="ActualWidth" />
										<Binding ElementName="PART_Indicator" Path="ActualHeight" />
										<Binding ElementName="PART_Track" Path="ActualWidth" />
									</MultiBinding>
								</Rectangle.Fill>
							</Rectangle>
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsIndeterminate" Value="False">
							<Setter TargetName="PART_Indicator" Property="Fill" Value="{StaticResource IndicatorBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ProgressBar}" BasedOn="{StaticResource ProgressBarBase}" TargetType="{x:Type ProgressBar}" />


	<!--  Focus Visual  -->

	<Style x:Key="RadioButtonFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="-2,-2,-2,-2" Stroke="#30000000" StrokeDashArray="1 2" StrokeThickness="1" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: RadioButton  -->

	<Style x:Key="RadioButtonBase" TargetType="{x:Type RadioButton}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource RadioButtonFocusVisual}" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Margin" Value="1,5,1,4" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<BulletDecorator VerticalAlignment="Center" Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="13" Height="13">
								<Ellipse x:Name="Border" Fill="{StaticResource WhiteBrush}" Stroke="{StaticResource TextBoxBorderBrush}" StrokeThickness="1"/>
								<Ellipse x:Name="CheckMark" Margin="3" Fill="{StaticResource MarkBrush}"/>
								<Ellipse x:Name="BorderHover" Fill="{StaticResource HoverBrush}" Stroke="{StaticResource HoverBorderBrush}" StrokeThickness="1" Visibility="Collapsed"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" RecognizesAccessKey="True" />
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="true">
							<Setter TargetName="Border" Property="Fill" Value="{StaticResource FocusBackgroundBrush}" />
							<Setter TargetName="Border" Property="Stroke" Value="{StaticResource FocusBorderBrush}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="false">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="BorderHover" Property="Visibility" Value="Visible" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Fill" Value="{StaticResource PressedBackgroundBrush2}" />
							<Setter TargetName="Border" Property="Stroke" Value="{StaticResource PressedBorderBrush}" />
							<Setter TargetName="Border" Property="BitmapEffect" Value="{x:Null}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Fill" Value="{StaticResource NormalBrush}" />
							<Setter TargetName="Border" Property="Stroke" Value="{StaticResource DisabledBorderBrush}" />
							<Setter TargetName="Border" Property="Opacity" Value="0.9" />
							<Setter TargetName="CheckMark" Property="Opacity" Value="0.5" />
							<Setter TargetName="CheckMark" Property="Fill" Value="Gray"/>
							<Setter Property="Foreground" Value="Gray" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonBase}" TargetType="{x:Type RadioButton}" />

	<Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border x:Name="Border" Margin="1"
					        Background="{StaticResource NormalBrush}"
					        BorderBrush="{StaticResource NormalBorderBrush}"
					        BorderThickness="1" CornerRadius="0">
						<Path HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="{StaticResource GlyphBrush}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border Background="Transparent" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="0" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition MaxHeight="18" />
				<RowDefinition Height="0.00001*" />
				<RowDefinition MaxHeight="18" />
			</Grid.RowDefinitions>
			<Border Grid.RowSpan="3" Background="#FFF0F0F0" CornerRadius="0" />
			<RepeatButton Grid.Row="0" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" Style="{StaticResource ScrollBarLineButton}" />
			<Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButton}" />
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb Margin="1,0,1,0" Background="{StaticResource HorizontalNormalBrush}" BorderBrush="{StaticResource HorizontalNormalBorderBrush}" Style="{StaticResource ScrollBarThumb}" />
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButton}" />
				</Track.IncreaseRepeatButton>
			</Track>
			<RepeatButton Grid.Row="3" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" Style="{StaticResource ScrollBarLineButton}" />
		</Grid>
	</ControlTemplate>

	<ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition MaxWidth="18" />
				<ColumnDefinition Width="0.00001*" />
				<ColumnDefinition MaxWidth="18" />
			</Grid.ColumnDefinitions>
			<Border Grid.ColumnSpan="3" Background="#FFF0F0F0" CornerRadius="0" />
			<RepeatButton Grid.Column="0" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" Style="{StaticResource ScrollBarLineButton}" />
			<Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarPageButton}" />
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb Margin="0,1,0,1" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" Style="{StaticResource ScrollBarThumb}" />
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarPageButton}" />
				</Track.IncreaseRepeatButton>
			</Track>
			<RepeatButton Grid.Column="3" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" Style="{StaticResource ScrollBarLineButton}" />
		</Grid>
	</ControlTemplate>

	<Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto" />
				<Setter Property="Height" Value="18" />
				<Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
			</Trigger>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Width" Value="18" />
				<Setter Property="Height" Value="Auto" />
				<Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--  BasicStyles: Separator  -->

	<Style x:Key="HorizontalSeparatorStyle" TargetType="{x:Type Separator}">
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Grid Width="{TemplateBinding Width}" Height="2">
						<Rectangle Height="1" Margin="0" VerticalAlignment="Top" Fill="Black" Opacity="0.1" />
						<Rectangle Height="1" Margin="0" VerticalAlignment="Bottom" Fill="White" Opacity="0.3" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="VerticalSeparatorStyle" TargetType="{x:Type Separator}">
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Grid Width="2" Height="{TemplateBinding Height}">
						<Rectangle Width="1" Margin="0,5" HorizontalAlignment="Left" Fill="Black" Opacity="0.0" />
						<Rectangle Width="1" Margin="0,5" HorizontalAlignment="Right" Fill="White" Opacity="0.2" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type Separator}" BasedOn="{StaticResource VerticalSeparatorStyle}" TargetType="{x:Type Separator}" />

	<!--  BasicStyles: HeaderedItemsControl  -->

	<Style TargetType="{x:Type HeaderedItemsControl}">
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource SEColor_LadyFernGreen}" />
		<Setter Property="Margin" Value="5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
						<DockPanel Margin="{TemplateBinding Margin}">
                            <DockPanel Margin="0,0,0,10" DockPanel.Dock="Top" Typography.Capitals="SmallCaps" TextBlock.FontWeight="SemiBold">
								<ContentPresenter ContentSource="Header" DockPanel.Dock="Left" TextBlock.FontSize="{TemplateBinding FontSize}" 
                                                  TextBlock.FontWeight="{TemplateBinding FontWeight}" TextBlock.Foreground="{TemplateBinding Foreground}" />
								<Separator Margin="4,0" VerticalAlignment="Center" Style="{DynamicResource HorizontalSeparatorStyle}" />
							</DockPanel>
							<ItemsPresenter Margin="10,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</DockPanel>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: HeaderedContentControl  -->

	<Style x:Key="HeaderedContentControl" TargetType="{x:Type HeaderedContentControl}">
		<Setter Property="Margin" Value="0,4" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type HeaderedContentControl}">
					<DockPanel Margin="{TemplateBinding Margin}">
						<DockPanel Margin="0,0,0,10" DockPanel.Dock="Top" Visibility="{TemplateBinding Header, Converter={StaticResource StringToVisibility}}">
							<ContentPresenter ContentSource="Header" DockPanel.Dock="Left" Margin="0,0,0,0" VerticalAlignment="Center"
											  TextBlock.FontSize="14" 
											  TextBlock.FontWeight="Normal" 
											  TextBlock.Foreground="{StaticResource BaseBrush0}" 
                                              Typography.Capitals="SmallCaps"/>
                            <Border BorderThickness="0,0,0,2" BorderBrush="{StaticResource BaseBrush1}" VerticalAlignment="Center" Margin="6,3,1,0" UseLayoutRounding="True"/>
						</DockPanel>
						<ContentPresenter Margin="{TemplateBinding Padding}" TextBlock.Foreground="{StaticResource TextBrush}"/>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource HeaderedContentControl}" TargetType="{x:Type HeaderedContentControl}" />
    
	<Style x:Key="BigHeaderedContentControl" TargetType="{x:Type HeaderedContentControl}">
		<Setter Property="Margin" Value="0,4" />
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type HeaderedContentControl}">
					<DockPanel Margin="{TemplateBinding Margin}">
                        <TextBlock DockPanel.Dock="Top" Text="{TemplateBinding Header}" Margin="0,0,0,10" FontSize="22" 
                                   Foreground="Silver" Typography.Capitals="SmallCaps" FontWeight="SemiBold"
								   Visibility="{TemplateBinding Header, Converter={StaticResource StringToVisibility}}" />
						<ContentPresenter Margin="10,0" TextElement.Foreground="{StaticResource TextBrush}"/>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: Slider  -->

	<Style x:Key="SliderVerticalFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="0,0,20,0" RadiusX="1" RadiusY="1"
						           Stroke="#60000000" StrokeDashArray="1 2" StrokeThickness="1" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SliderHorizontalFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="0,0,0,20" RadiusX="0" RadiusY="0"
						           Stroke="#60000000" StrokeDashArray="1 2" StrokeThickness="1" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border Background="Transparent" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SliderButtonLeftStyle" TargetType="{x:Type RepeatButton}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid Background="Transparent">
						<Border Name="Border" Height="2" Margin="0" Background="{StaticResource FocusBorderBrush}" Opacity="1" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Border" Property="Background" Value="Gray" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SliderButtonBottomStyle" TargetType="{x:Type RepeatButton}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid Background="Transparent">
						<Border Name="Border" Width="2" Margin="0" Background="{StaticResource FocusBorderBrush}" Opacity="1" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Border" Property="Background" Value="Gray" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SliderHorizontalThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Path x:Name="Thumb" Width="11" Height="20"
					      Data="M0.5,0.5 L9.5,0.5 9.5,11.166667 4.9872159,18 0.5,11.166667 z"
					      Fill="{StaticResource NormalBrush}"
					      Stretch="Fill"
					      Stroke="{StaticResource NormalBorderBrush}"
					      StrokeThickness="1" />
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Thumb" Property="Fill" Value="{StaticResource LightBrush}" />
						</Trigger>
						<!--
							<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Thumb" Property="Fill" Value="{StaticResource DisabledBrush}"/>
							<Setter TargetName="Thumb" Property="Stroke" Value="{StaticResource DisabledBorderBrush}"/>
							</Trigger>
						-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SliderVerticalThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Path x:Name="Thumb" Width="20" Height="11"
					      Data="M0.5,0.5 L6.5394737,0.5 9.5,9.2526045 6.5266896,18 0.5,17.729167 z"
					      Fill="{StaticResource NormalBrush}"
					      Stretch="Fill"
					      Stroke="{StaticResource NormalBorderBrush}"
					      StrokeThickness="1" />
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Thumb" Property="Fill" Value="{StaticResource LightBrush}" />
						</Trigger>
						<!--
							<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Thumb" Property="Fill" Value="{StaticResource DisabledBrush}"/>
							<Setter TargetName="Thumb" Property="Stroke" Value="{StaticResource DisabledBorderBrush}"/>
							</Trigger>
						-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
		<Grid SnapsToDevicePixels="True">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<TickBar x:Name="TopTick" Grid.Row="0" Height="4"
			         Fill="{StaticResource GlyphBrush}"
			         Opacity="0.7" Placement="Top" SnapsToDevicePixels="True"
			         Visibility="Collapsed" />
			<Border x:Name="TrackBackground" Grid.Row="1" Height="4"
			        Margin="0"
			        Background="{StaticResource NormalBrushInverted}"
			        BorderBrush="{StaticResource NormalBorderBrush}"
			        BorderThickness="1" CornerRadius="0" />
			<Track x:Name="PART_Track" Grid.Row="1">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="Slider.DecreaseLarge" Style="{StaticResource SliderButtonLeftStyle}" />
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb Style="{StaticResource SliderHorizontalThumbStyle}" Visibility="{TemplateBinding Tag}" />
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="Slider.IncreaseLarge" Style="{StaticResource SliderButtonStyle}" />
				</Track.IncreaseRepeatButton>
			</Track>
			<TickBar x:Name="BottomTick" Grid.Row="2" Height="4"
			         Fill="{StaticResource GlyphBrush}"
			         Opacity="0.7" Placement="Bottom" SnapsToDevicePixels="True"
			         Visibility="Collapsed" />
			<Grid Grid.Row="3" Width="50" Margin="-20,1,0,-20" HorizontalAlignment="Left">
				<TextBlock HorizontalAlignment="Center" FontSize="8" Text="{Binding Minimum, ElementName=BottomTick}" />
			</Grid>
			<Grid Grid.Row="3" Width="51" Margin="0,1,-20,-20" HorizontalAlignment="Right">
				<TextBlock HorizontalAlignment="Center" FontSize="8" Text="{Binding Maximum, ElementName=BottomTick}" />
			</Grid>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
				<Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter TargetName="TopTick" Property="Opacity" Value="0.5" />
				<!--  <Setter TargetName="TrackBackground" Property="Opacity" Value="0.5"/>  -->
				<Setter TargetName="BottomTick" Property="Opacity" Value="0.5" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="VerticalSlider" TargetType="{x:Type Slider}">
		<Grid SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<TickBar x:Name="TopTick" Width="4"
			         Fill="{StaticResource GlyphBrush}"
			         Opacity="0.7" Placement="Left" SnapsToDevicePixels="True"
			         Visibility="Collapsed" />
			<Border x:Name="TrackBackground" Grid.Column="1" Width="4"
			        Margin="0"
			        Background="{StaticResource HorizontalNormalBrushInverted}"
			        BorderBrush="{StaticResource HorizontalNormalBorderBrush}"
			        BorderThickness="1" CornerRadius="0" />
			<Track x:Name="PART_Track" Grid.Column="1">
				<Track.DecreaseRepeatButton>
					<RepeatButton Command="Slider.DecreaseLarge" Style="{StaticResource SliderButtonBottomStyle}" />
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb Style="{StaticResource SliderVerticalThumbStyle}" Visibility="{TemplateBinding Tag}" />
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton Command="Slider.IncreaseLarge" Style="{StaticResource SliderButtonStyle}" />
				</Track.IncreaseRepeatButton>
			</Track>
			<TickBar x:Name="BottomTick" Grid.Column="2" Width="4"
			         Fill="{StaticResource GlyphBrush}"
			         Opacity="0.7" Placement="Right" SnapsToDevicePixels="True"
			         Visibility="Collapsed" />
			<TextBlock Grid.Column="3" Margin="4,0,-50,0" HorizontalAlignment="Left"
			           VerticalAlignment="Top" FontSize="8"
			           Text="{Binding Maximum,
			                          ElementName=BottomTick}" />
			<TextBlock Grid.Column="3" Margin="4,0,-50,2" HorizontalAlignment="Left"
			           VerticalAlignment="Bottom" FontSize="8"
			           Text="{Binding Minimum,
			                          ElementName=BottomTick}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
				<Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter TargetName="TopTick" Property="Opacity" Value="0.5" />
				<!--  <Setter TargetName="TrackBackground" Property="Opacity" Value="0.5"/>  -->
				<Setter TargetName="BottomTick" Property="Opacity" Value="0.5" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style TargetType="{x:Type Slider}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="TickPlacement" Value="BottomRight" />
		<Setter Property="AutoToolTipPlacement" Value="TopLeft" />
		<Setter Property="Foreground" Value="Black" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Height" Value="40" />
				<Setter Property="Template" Value="{StaticResource HorizontalSlider}" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource SliderHorizontalFocusVisual}" />
			</Trigger>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Width" Value="40" />
				<Setter Property="Template" Value="{StaticResource VerticalSlider}" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource SliderVerticalFocusVisual}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--  BasicStyles: TabControl  -->

	<Style TargetType="{x:Type TabControl}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="Silver" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Margin" Value="10"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid Name="LayoutRoot" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<TabPanel x:Name="HeaderPanel" Grid.Row="0" Margin="0"
						          Panel.ZIndex="1" IsItemsHost="True" KeyboardNavigation.TabIndex="1" />
						<Border x:Name="ContentPanel" Grid.Row="1" Margin="1,0,1,1"
						        Background="#FFF8F8F8"
						        BorderThickness="0" CornerRadius="0" KeyboardNavigation.DirectionalNavigation="Contained"
						        KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
							<ContentPresenter x:Name="PART_SelectedContentHost" Margin="0" ContentSource="SelectedContent" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
							<Setter TargetName="ContentPanel" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="TabControlEmptyForSingle" BasedOn="{StaticResource {x:Type TabControl}}" TargetType="{x:Type TabControl}">
		<Style.Triggers>
			<DataTrigger Binding="{Binding Path=Items.Count, RelativeSource={RelativeSource Mode=Self}}" Value="1">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabControl}">
							<DockPanel>
								<TabPanel x:Name="HeaderPanel" Margin="0,0,0,-1" Panel.ZIndex="1"
								          DockPanel.Dock="Top" IsItemsHost="True" KeyboardNavigation.TabIndex="1" />
								<ContentPresenter x:Name="PART_SelectedContentHost" Margin="0,-10,0,0" ContentSource="SelectedContent" />
							</DockPanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<!--  BasicStyles: TabItem  -->

	<Style x:Key="TabItemBase" TargetType="{x:Type TabItem}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
		<Setter Property="MinHeight" Value="20" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid>
						<Border x:Name="Border"
						        MinHeight="{TemplateBinding MinHeight}"
						        Margin="0,1,-1,0" Background="#DDD" BorderBrush="Transparent"
						        BorderThickness="1,1,1,1" CornerRadius="0">
							<Grid>
								<Border Background="{TemplateBinding Background}" CornerRadius="0" Opacity="0.7" />
								<ContentPresenter x:Name="ContentSite" Margin="12,2,12,2" HorizontalAlignment="Center"
								                  VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="#FFF8F8F8" />
							<Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
							<Setter TargetName="Border" Property="Margin" Value="0,0,-1,0" />
							<Setter TargetName="Border" Property="MinHeight" Value="20" />
							<Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
							<Setter TargetName="ContentSite" Property="Margin" Value="12,1,12,3" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource BaseBrush1}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource TabItemBase}" TargetType="{x:Type TabItem}" />

	<Style x:Key="SingleTabItem" TargetType="{x:Type TabItem}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Height" Value="0" />
		<Setter Property="Template" Value="{x:Null}" />
	</Style>

	<!--  BasicStyles: TextBlock  -->

	<Style TargetType="{x:Type TextBlock}">
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.6" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<!--  BasicStyles: DefaultErrorTemplate  -->

	<ControlTemplate x:Key="DefaultErrorTemplate">
		<ControlTemplate.Resources>
			<ToolTip x:Key="eToolTip" Placement="Right">
				<ToolTip.Style>
					<Style TargetType="{x:Type ToolTip}">
						<Setter Property="OverridesDefaultStyle" Value="true" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ToolTip}">
									<Grid Margin="5,0,5,5">
										<Border PresentationOptions:Freeze="True" Background="#FFCC0000" CornerRadius="0">
											<Border.Effect>
												<DropShadowEffect BlurRadius="4" Direction="300" Opacity="0.3" RenderingBias="Performance" ShadowDepth="3" />
											</Border.Effect>
										</Border>
										<TextBlock Foreground="White" Text="{Binding}" Margin="8,3,8,4"/>
									</Grid>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</ToolTip.Style>
			</ToolTip>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>

			<Border BorderBrush="#FFEE0000" BorderThickness="1" CornerRadius="0">
				<AdornedElementPlaceholder x:Name="thisadorner" Margin="-2" />
			</Border>
			<Button Grid.Column="1" Width="9" Height="9"
			        Margin="-9,0,0,11" VerticalAlignment="Top"
			        DataContext="{Binding ElementName=thisadorner,
			                              Path=AdornedElement.(Validation.Errors),
			                              Converter={converters:ValidationErrorsToStringConverter}}"
			        ToolTip="{StaticResource eToolTip}">
				<Button.Template>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid Width="9" Height="9">
							<Path x:Name="path" Width="Auto" Height="Auto"
							      Margin="0,-0.012,-0.013,0.013" Data="M0,0 L8.0027452,0.020432061 C10.359728,0.020432061 11.966761,0.84516371 12.021468,4.5165497 12.015829,5.2082602 12,8.1997837 12,11.917 z" Fill="#FFBC0000"
							      Stretch="Fill"
							      Stroke="{x:Null}" />
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true" />
							<Trigger Property="IsDefaulted" Value="true" />
							<Trigger Property="IsMouseOver" Value="true">
								<Setter TargetName="path" Property="Fill" Value="Red" />
							</Trigger>
							<Trigger Property="IsPressed" Value="true" />
							<Trigger Property="IsEnabled" Value="false">
								<Setter TargetName="path" Property="Fill" Value="#FF888888" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Button.Template>
			</Button>
		</Grid>
	</ControlTemplate>

	<ControlTemplate x:Key="CustomErrorTemplate">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>

			<Border BorderBrush="#FFEE0000" BorderThickness="1" CornerRadius="0">
				<AdornedElementPlaceholder x:Name="thisadorner" Margin="-2" />
			</Border>
			<Button Grid.Column="1" Width="9" Height="9"
			        Margin="-9,0,0,11" VerticalAlignment="Top"
			        ToolTip="{Binding ElementName=thisadorner,
			                          Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
			        ToolTipService.Placement="Right">
				<Button.Template>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid Width="9" Height="9">
							<Path x:Name="path" Width="Auto" Height="Auto"
							      Margin="0,-0.012,-0.013,0.013" Data="M0,0 L8.0027452,0.020432061 C10.359728,0.020432061 11.966761,0.84516371 12.021468,4.5165497 12.015829,5.2082602 12,8.1997837 12,11.917 z" Fill="#FFBC0000"
							      Stretch="Fill"
							      Stroke="{x:Null}" />
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true" />
							<Trigger Property="IsDefaulted" Value="true" />
							<Trigger Property="IsMouseOver" Value="true">
								<Setter TargetName="path" Property="Fill" Value="Red" />
							</Trigger>
							<Trigger Property="IsPressed" Value="true" />
							<Trigger Property="IsEnabled" Value="false">
								<Setter TargetName="path" Property="Fill" Value="#FF888888" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Button.Template>
			</Button>
		</Grid>
	</ControlTemplate>

	<!--  BasicStyles: TextBox  -->

	<ContextMenu x:Key="TextBoxContextMenu">
		<MenuItem Command="ApplicationCommands.Copy" />
		<MenuItem Command="ApplicationCommands.Cut" />
		<MenuItem Command="ApplicationCommands.Paste" />
	</ContextMenu>

	<Style x:Key="TextBoxBase" TargetType="{x:Type TextBox}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
		<Setter Property="Height" Value="24" />
		<Setter Property="Padding" Value="1,1,1,0" />
		<Setter Property="Margin" Value="0"/>
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Validation.ErrorTemplate" Value="{DynamicResource DefaultErrorTemplate}" />
		<Setter Property="SelectionBrush" Value="{StaticResource BaseBrush0}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Grid Name="Grid">
						<Border x:Name="Border" Margin="1"
						        Background="{TemplateBinding Background}"
						        BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}">
							<ScrollViewer x:Name="PART_ContentHost" Foreground="{TemplateBinding Foreground}" 
										Margin="{TemplateBinding Padding}"/>
						</Border>
						<Border Name="HoverBorder" IsHitTestVisible="False" Margin="1"
						        Background="{StaticResource HoverBrush}"
						        BorderBrush="{StaticResource HoverBorderBrush}"
						        BorderThickness="1" 
								Opacity="0.3"
						        Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="BorderThickness" Value="1"/>
								<Condition Property="IsMouseOver" Value="true"/>
								<Condition Property="IsReadOnly" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource FocusBorderBrush}" />
							<Setter Property="Foreground" Value="Black" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsFocused" Value="true"/>
								<Condition Property="IsReadOnly" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource FocusBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource FocusBorderBrush}" />
							<Setter TargetName="HoverBorder" Property="Visibility" Value="Visible" />
							<Setter Property="Foreground" Value="Black" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Grid" Property="Opacity" Value="0.4" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
						<Trigger Property="IsReadOnly" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{x:Null}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type TextBox}" BasedOn="{StaticResource TextBoxBase}" TargetType="{x:Type TextBox}" />

	<Style x:Key="ReadOnlyTextBox" BasedOn="{StaticResource TextBoxBase}" TargetType="{x:Type TextBox}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="IsReadOnly" Value="True" />
		<Setter Property="TextWrapping" Value="Wrap" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border Background="{TemplateBinding Background}" 
							BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}"
						    CornerRadius="0"
							Margin="1">
						<ScrollViewer x:Name="PART_ContentHost" Margin="1" Foreground="{TemplateBinding Foreground}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ReadOnlyTrimmingTextBox" BasedOn="{StaticResource TextBoxBase}" TargetType="TextBox">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="IsReadOnly" Value="True" />
		<Style.Triggers>
			<DataTrigger Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="false">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="TextBox">
							<Border Background="{TemplateBinding Background}" 
									BorderBrush="{TemplateBinding BorderBrush}" 
									BorderThickness="{TemplateBinding BorderThickness}">
								<TextBlock Margin="4,2" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Text}" TextTrimming="CharacterEllipsis" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type PasswordBox}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
		<Setter Property="Height" Value="24" />
		<Setter Property="Padding" Value="1,1,1,0" />
		<Setter Property="Margin" Value="0"/>
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Validation.ErrorTemplate" Value="{DynamicResource DefaultErrorTemplate}" />
		<Setter Property="SelectionBrush" Value="{StaticResource BaseBrush0}" />
		<Setter Property="PasswordChar" Value="●" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type PasswordBox}">
					<Grid Name="Grid">
						<Border x:Name="Border" Margin="1"
						        Background="{TemplateBinding Background}"
						        BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}">
							<ScrollViewer x:Name="PART_ContentHost" Foreground="{TemplateBinding Foreground}" 
										Margin="{TemplateBinding Padding}"/>
						</Border>
						<Border Name="HoverBorder" IsHitTestVisible="False" Margin="1"
						        Background="{StaticResource HoverBrush}"
						        BorderBrush="{StaticResource HoverBorderBrush}"
						        BorderThickness="1" 
								Opacity="0.3"
						        Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="BorderThickness" Value="1"/>
								<Condition Property="IsMouseOver" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource FocusBorderBrush}" />
							<Setter Property="Foreground" Value="Black" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsFocused" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource FocusBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource FocusBorderBrush}" />
							<Setter TargetName="HoverBorder" Property="Visibility" Value="Visible" />
							<Setter Property="Foreground" Value="Black" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Grid" Property="Opacity" Value="0.4" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: ComboBox  -->

	<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Grid Name="Grid" SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="17" />
			</Grid.ColumnDefinitions>
			<Border x:Name="Border" Grid.ColumnSpan="2" Margin="1"
			        Background="{StaticResource NormalBrush}"
			        BorderBrush="{StaticResource NormalBorderBrush}"
			        BorderThickness="1" CornerRadius="0" />
			<Path x:Name="Arrow" Grid.Column="1" Margin="1,2,2,2"
			      HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"
			      Fill="{StaticResource GlyphBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsChecked" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush2}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Grid" Property="Opacity" Value="0.5" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="ComboBoxEditableToggleButton" TargetType="{x:Type ToggleButton}">
		<Grid Name="Grid" SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition />
				<ColumnDefinition Width="17" />
			</Grid.ColumnDefinitions>
			<Border x:Name="TextBorder" Grid.Column="0" Margin="1,1,0,1"
			        Background="White"
			        BorderBrush="{StaticResource NormalBorderBrush}"
			        BorderThickness="1,1,0,1" CornerRadius="0" />
			<Border x:Name="Border" Grid.Column="1" Margin="-1,1,1,1"
			        Background="{StaticResource NormalBrush}"
			        BorderBrush="{StaticResource NormalBorderBrush}"
			        BorderThickness="1,1,1,1" CornerRadius="0" />
			<Path x:Name="Arrow" Grid.Column="1" Margin="1,2,2,2"
			      HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"
			      Fill="{StaticResource GlyphBrush}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsChecked" Value="true">
				<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
				<Setter TargetName="Arrow" Property="Fill" Value="White"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Grid" Property="Opacity" Value="0.5" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="ComboBoxBase" TargetType="{x:Type ComboBox}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Validation.ErrorTemplate" Value="{DynamicResource DefaultErrorTemplate}" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Height" Value="24" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid Name="Grid" SnapsToDevicePixels="True">
						<ToggleButton x:Name="ToggleButton"
						              Height="{TemplateBinding Height}"
						              ClickMode="Press" Focusable="false"
						              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						              Template="{StaticResource ComboBoxToggleButton}"/>
						<ContentPresenter x:Name="ContentSite" Margin="8,0,20,0"
						                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						                  VerticalAlignment="Center"
						                  Content="{TemplateBinding SelectionBoxItem}"
						                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
						                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
						                  IsHitTestVisible="False" />
						<TextBox x:Name="PART_EditableTextBox" Margin="0,0,17,0" 
								 BorderThickness="1,1,0,1"
								 BorderBrush="Transparent"
								 Background="Transparent" 
								 HorizontalAlignment="Stretch"
						         VerticalAlignment="Center" 
						         Focusable="True"
						         IsReadOnly="{TemplateBinding IsReadOnly}"
						         Visibility="Hidden" 
                                 Height="{TemplateBinding Height}"/>
						<Popup x:Name="Popup" AllowsTransparency="True" Focusable="False"
						       IsOpen="{TemplateBinding IsDropDownOpen}"
						       Placement="Bottom" PopupAnimation="Slide">
							<Grid Margin="5,0,5,5">
								<Border PresentationOptions:Freeze="True" Background="White" CornerRadius="0">
									<Border.Effect>
										<DropShadowEffect BlurRadius="4" Direction="300" Opacity="0.3" RenderingBias="Performance" ShadowDepth="3" />
									</Border.Effect>
								</Border>
								<Grid x:Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
									<Border x:Name="DropDownBorder" Background="{DynamicResource MenuBackground}" BorderBrush="{StaticResource PopupBorderBrush}" BorderThickness="1" />
									<ScrollViewer Margin="4" SnapsToDevicePixels="True">
										<ItemsPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" KeyboardNavigation.DirectionalNavigation="Contained" />
									</ScrollViewer>
								</Grid>
							</Grid>
						</Popup>
						<Border Name="HoverBorder" Margin="1"
						        Background="{StaticResource HoverBrush}"
						        BorderBrush="{StaticResource HoverBorderBrush}"
						        BorderThickness="1" CornerRadius="0" IsHitTestVisible="False"
						        Opacity="0.3" Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDropDownOpen" Value="True">
							<Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="HoverBorder" Property="Visibility" Value="Visible" />
							<Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Grid" Property="Opacity" Value="0.5" />
							<Setter TargetName="PART_EditableTextBox" Property="Foreground" Value="Black"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
						<Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
							<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
						</Trigger>
						<Trigger Property="IsEditable" Value="true">
							<Setter Property="IsTabStop" Value="false" />
							<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
							<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
							<Setter TargetName="ToggleButton" Property="Template" Value="{StaticResource ComboBoxEditableToggleButton}"/>
							<Setter TargetName="HoverBorder" Property="BorderThickness" Value="1" />
							<Setter TargetName="HoverBorder" Property="Background" Value="Transparent" />
							<Setter TargetName="HoverBorder" Property="Opacity" Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxBase}" TargetType="{x:Type ComboBox}" />

	<Style x:Key="WatermarkComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxBase}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid Name="Grid" SnapsToDevicePixels="True">
						<ToggleButton x:Name="ToggleButton"
						              Height="{TemplateBinding Height}"
						              ClickMode="Press" Focusable="false"
						              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						              Template="{StaticResource ComboBoxToggleButton}"/>
						<ContentPresenter x:Name="ContentSite" Margin="8,0,20,0"
						                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						                  VerticalAlignment="Center"
						                  Content="{TemplateBinding SelectionBoxItem}"
						                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
						                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
						                  IsHitTestVisible="False" 
										  TextBlock.Foreground="Black"/>
						<Border x:Name="WatermarkBorder" Margin="1,1,17,1" IsHitTestVisible="False" Background="{StaticResource NormalBrush}" BorderThickness="1" CornerRadius="0">
							<TextBlock Text="{TemplateBinding Tag}" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" Foreground="#FF333333" FontStyle="Italic" Margin="4,0,0,0"/>
						</Border>
						<TextBox x:Name="PART_EditableTextBox" Margin="0,0,17,0" 
								 BorderThickness="1,1,0,1"
								 BorderBrush="Transparent"
								 Background="Transparent" 
								 HorizontalAlignment="Stretch"
						         VerticalAlignment="Center" 
						         Focusable="True"
						         IsReadOnly="{TemplateBinding IsReadOnly}"
						         Visibility="Hidden" />
						<Popup x:Name="Popup" AllowsTransparency="True" Focusable="False"
						       IsOpen="{TemplateBinding IsDropDownOpen}"
						       Placement="Bottom" PopupAnimation="Slide">
							<Grid Margin="5,0,5,5">
								<Border PresentationOptions:Freeze="True" Background="White" CornerRadius="0">
									<Border.Effect>
										<DropShadowEffect BlurRadius="4" Direction="300" Opacity="0.3" RenderingBias="Performance" ShadowDepth="3" />
									</Border.Effect>
								</Border>
								<Grid x:Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
									<Border x:Name="DropDownBorder" Background="{DynamicResource MenuBackground}" BorderBrush="{StaticResource PopupBorderBrush}" BorderThickness="1" />
									<ScrollViewer Margin="4" SnapsToDevicePixels="True">
										<ItemsPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" KeyboardNavigation.DirectionalNavigation="Contained" />
									</ScrollViewer>
								</Grid>
							</Grid>
						</Popup>
						<Border Name="HoverBorder" Margin="1"
						        Background="{StaticResource HoverBrush}"
						        BorderBrush="{StaticResource HoverBorderBrush}"
						        BorderThickness="2" CornerRadius="0" IsHitTestVisible="False"
						        Opacity="0.3" Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDropDownOpen" Value="True">
							<Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="Black" />
							<Setter TargetName="WatermarkBorder" Property="Background" Value="{StaticResource PressedBackgroundBrush2}"/>
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="HoverBorder" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Grid" Property="Opacity" Value="0.5" />
							<Setter TargetName="PART_EditableTextBox" Property="Foreground" Value="Black"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
						<Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
							<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
						</Trigger>
						<Trigger Property="IsEditable" Value="true">
							<Setter Property="IsTabStop" Value="false" />
							<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
							<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
							<Setter TargetName="ToggleButton" Property="Template" Value="{StaticResource ComboBoxEditableToggleButton}"/>
							<Setter TargetName="HoverBorder" Property="BorderThickness" Value="1" />
							<Setter TargetName="HoverBorder" Property="Background" Value="Transparent" />
							<Setter TargetName="HoverBorder" Property="Opacity" Value="1" />
						</Trigger>
						<DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
							<Setter TargetName="WatermarkBorder" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: ComboBoxItem  -->

	<Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Padding" Value="4,0" />
		<Setter Property="MinHeight" Value="18" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid>
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="1" CornerRadius="0" />
						<ContentPresenter Name="Content" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ListBoxItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ListBoxItemBorder}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  BasicStyles: ToolTip  -->

	<Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="HasDropShadow" Value="False" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="FontWeight" Value="Normal"/>
		<!--<Setter Property="Background" Value="{StaticResource TooltipBackground}" />-->
		<Setter Property="Background" Value="White"/>
		<Setter Property="Padding" Value="8,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolTip}">
					<Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Margin="2,2,5,5">
						<Border x:Name="Border" PresentationOptions:Freeze="True" Background="{TemplateBinding Background}" CornerRadius="0">
							<Border.Effect>
								<DropShadowEffect BlurRadius="6" Direction="315" Opacity="0.5" RenderingBias="Performance" ShadowDepth="3" />
							</Border.Effect>
						</Border>
						<ContentPresenter TextBlock.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}" 
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasDropShadow" Value="true">
							<Setter TargetName="Border" Property="CornerRadius" Value="0" />
							<Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<!--<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock TextWrapping="Wrap" Text="{Binding}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>-->
	</Style>


	<!--  BasicStyles: TreeView  -->

	<Style x:Key="{x:Type TreeView}" TargetType="{x:Type TreeView}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Background" Value="{StaticResource WhiteBrush}" />
		<Setter Property="BorderBrush" Value="{StaticResource SolidBorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="4" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<Border x:Name="Border" 
							Background="{TemplateBinding Background}" 
							BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
						<ScrollViewer CanContentScroll="False" Focusable="False" Padding="{TemplateBinding Padding}">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="TreeViewNonScrollableStyle" TargetType="{x:Type TreeView}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Background" Value="{StaticResource WhiteBrush}" />
		<Setter Property="BorderBrush" Value="{StaticResource SolidBorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="4" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<Border x:Name="Border"
					        Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="{TemplateBinding BorderThickness}"
					        CornerRadius="0"
					        Padding="{TemplateBinding Padding}">
						<ItemsPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  BasicStyles: TreeViewItem  -->

	<Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid Width="11" Height="11" Margin="1,2,5,2" Background="White" SnapsToDevicePixels="True">
						<Path x:Name="Arrow" Width="4.542" Height="7.9"
						      HorizontalAlignment="Center" VerticalAlignment="Center" Data="M4.3065901,3.9873622 L0.47575,7.5068495 0.47575,0.49315069 z"
						      Fill="White" RenderTransformOrigin="0.4,0.5" Stretch="Uniform"
						      Stroke="Black" StrokeThickness="0.5" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="Arrow" Property="RenderTransform">
								<Setter.Value>
									<TransformGroup>
										<ScaleTransform />
										<SkewTransform />
										<RotateTransform Angle="45" />
										<TranslateTransform />
									</TransformGroup>
								</Setter.Value>
							</Setter>
							<Setter TargetName="Arrow" Property="Fill" Value="#555" />
							<Setter TargetName="Arrow" Property="Stroke" Value="Black" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Arrow" Property="Fill" Value="DarkGray" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Arrow" Property="Stroke" Value="#ff005b9b" />
							<Setter TargetName="Arrow" Property="Fill" Value="#8800a3d2" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="TreeViewItemBase" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="MinHeight" Value="18" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" MinWidth="15" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<Rectangle x:Name="HorLn" Height="1" Margin="6,0,0,0"
						           SnapsToDevicePixels="true" Stroke="#8444" StrokeDashArray="1 2" />
						<Rectangle x:Name="VerLn" Grid.RowSpan="2" Width="1"
						           Margin="-7,0,0,0" SnapsToDevicePixels="true" Stroke="#8444"
						           StrokeDashArray="1 2" />
						<ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}" />
						<Border x:Name="Highlight" Grid.Column="1" Grid.ColumnSpan="2"
						        Margin="0,0,0,0" HorizontalAlignment="Stretch" Background="Transparent">
							<Border x:Name="Border" HorizontalAlignment="Left" BorderThickness="1" CornerRadius="0" Padding="{TemplateBinding Padding}">
								<ContentPresenter x:Name="PART_Header" Margin="2,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" ContentSource="Header" />
							</Border>
						</Border>

						<ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" />
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource IsLastLine}}" Value="true">
							<Setter TargetName="VerLn" Property="Height" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem}, Converter={StaticResource LastLineHeight}}" />
							<Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top" />
						</DataTrigger>

						<Trigger Property="IsExpanded" Value="false">
							<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Width" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Height" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
						</MultiTrigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ListBoxItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ListBoxItemBorder}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="IsSelectionActive" Value="false" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource UnfocusedSelectedItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UnfocusedSelectedItemBorder}" />
							<Setter Property="Foreground" Value="White" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" Value="0.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style BasedOn="{StaticResource TreeViewItemBase}" TargetType="{x:Type TreeViewItem}" />
	<Style x:Key="TreeViewItemBaseViewModel" BasedOn="{StaticResource TreeViewItemBase}" TargetType="{x:Type TreeViewItem}">
		<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay, FallbackValue=False}" />
		<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, FallbackValue=False}" />
	</Style>

	<Style x:Key="TreeViewItemBaseTransparent" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="MinHeight" Value="18" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" MinWidth="15" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<Rectangle x:Name="HorLn" Height="1" Margin="6,0,0,0"
						           SnapsToDevicePixels="true" Stroke="#8444" StrokeDashArray="1 2" />
						<Rectangle x:Name="VerLn" Grid.RowSpan="2" Width="1"
						           Margin="-7,0,0,0" SnapsToDevicePixels="true" Stroke="#8444"
						           StrokeDashArray="1 2" />
						<ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}" />
						<Border x:Name="Highlight" Grid.Column="1" Grid.ColumnSpan="2"
						        Margin="0,0,0,0" HorizontalAlignment="Stretch" Background="Transparent">
							<Border x:Name="Border" HorizontalAlignment="Left" BorderThickness="1" CornerRadius="0" Padding="{TemplateBinding Padding}">
								<ContentPresenter x:Name="PART_Header" Margin="2,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" ContentSource="Header" />
							</Border>
						</Border>

						<ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" />
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource IsLastLine}}" Value="true">
							<Setter TargetName="VerLn" Property="Height" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem}, Converter={StaticResource LastLineHeight}}" />
							<Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top" />
						</DataTrigger>

						<Trigger Property="IsExpanded" Value="false">
							<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Width" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false" />
								<Condition Property="Height" Value="Auto" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
						</MultiTrigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Opacity" Value="0.5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TreeViewItemBaseViewModelTransparent" BasedOn="{StaticResource TreeViewItemBaseTransparent}" TargetType="{x:Type TreeViewItem}">
		<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
		<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
	</Style>

	<Style x:Key="ToolBoxExpandCollapseToggleStyle" TargetType="ToggleButton">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<Path x:Name="Arrow" Width="8" Height="8"
						      Margin="8,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"
						      Data="M5.2,4 L0,8 0,0 z" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.2,0.6"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="Arrow" Property="RenderTransform">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="90" />
									</TransformGroup>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Arrow" Property="Fill" Value="DarkGray" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolBoxTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="MinHeight" Value="20" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<StackPanel>
						<Border x:Name="Border" MinHeight="{TemplateBinding MinHeight}" BorderThickness="2" Padding="0">
							<Grid Background="{TemplateBinding Background}">
								<ToggleButton x:Name="Expander" HorizontalAlignment="Stretch" ClickMode="Press" Foreground="{TemplateBinding Foreground}" Margin="2"
											  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ToolBoxExpandCollapseToggleStyle}" />
								<ContentPresenter x:Name="PART_Header" Margin="19,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" />
							</Grid>
						</Border>
						<ItemsPresenter x:Name="ItemsHost" Margin="20,0,0,0" />
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="false">
							<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<!--<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverListBoxItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HoverListBoxItemBackground}" />-->
							<!--<Setter Property="Foreground" Value="Black" />-->
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<!--<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverBrush}" />-->
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ListBoxItemBorder}" />
							<!--<Setter Property="Foreground" Value="Black" />-->
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToolBoxTreeViewItemViewModelStyle" BasedOn="{StaticResource ToolBoxTreeViewItemStyle}" TargetType="{x:Type TreeViewItem}">
		<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay, FallbackValue=False}" />
		<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, FallbackValue=False}" />
	</Style>

	<Style x:Key="NoLinesExpandCollapseToggleStyle" TargetType="ToggleButton">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid Background="Transparent" SnapsToDevicePixels="True">
						<Path x:Name="Arrow" Width="4.542" Height="7.9"
						      Margin="5,1,5,1" HorizontalAlignment="Left" VerticalAlignment="Center"
						      Data="M4.3065901,3.9873622 L0.47575,7.5068495 0.47575,0.49315069 z" Fill="White" RenderTransformOrigin="0.4,0.5"
						      Stretch="Uniform" Stroke="Black" StrokeThickness="0.5" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="Arrow" Property="RenderTransform">
								<Setter.Value>
									<TransformGroup>
										<ScaleTransform />
										<SkewTransform />
										<RotateTransform Angle="45" />
										<TranslateTransform />
									</TransformGroup>
								</Setter.Value>
							</Setter>
							<Setter TargetName="Arrow" Property="Fill" Value="#555" />
							<Setter TargetName="Arrow" Property="Stroke" Value="Black" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Arrow" Property="Fill" Value="DarkGray" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Arrow" Property="Stroke" Value="#ff005b9b" />
							<Setter TargetName="Arrow" Property="Fill" Value="#8800a3d2" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NoLinesTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="MinHeight" Value="18" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<StackPanel>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver" />
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid MinHeight="{TemplateBinding MinHeight}">
							<ToggleButton x:Name="Expander" HorizontalAlignment="Left" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource NoLinesExpandCollapseToggleStyle}" />
							<Border x:Name="Highlight" Margin="16,0,0,0" HorizontalAlignment="Stretch" Background="Transparent">
								<Border x:Name="Border" HorizontalAlignment="Left" BorderThickness="1" CornerRadius="0" Padding="{TemplateBinding Padding}">
									<ContentPresenter x:Name="PART_Header" Margin="2,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" ContentSource="Header" />
								</Border>
							</Border>
						</Grid>
						<ItemsPresenter x:Name="ItemsHost" Margin="15,0,0,0" />
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="false">
							<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ListBoxItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ListBoxItemBorder}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="IsSelectionActive" Value="false" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource UnfocusedSelectedItemBackground}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource UnfocusedSelectedItemBorder}" />
							<Setter Property="Foreground" Value="White" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NoLinesTreeViewItemStyleViewModel" BasedOn="{StaticResource NoLinesTreeViewItemStyle}" TargetType="{x:Type TreeViewItem}">
		<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay, FallbackValue=False}" />
		<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, FallbackValue=False}" />
	</Style>

	<!--  BasicStyles: GridSplitter  -->

	<LinearGradientBrush x:Key="HPanelBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0" Color="#88CCCCCC" />
		<GradientStop Offset="1" Color="#88888888" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="VPanelBackgroundBrush" StartPoint="0,0" EndPoint="1,0">
		<GradientStop Offset="0" Color="#88CCCCCC" />
		<GradientStop Offset="1" Color="#88888888" />
	</LinearGradientBrush>

	<ControlTemplate x:Key="VerticalGridSplitterTemplate">
		<Border Background="{TemplateBinding Panel.Background}" BorderBrush="{TemplateBinding Border.BorderBrush}" BorderThickness="{TemplateBinding Border.BorderThickness}">
			<Border BorderThickness="1,1,0,0">
				<Canvas Width="3" Height="19" Opacity="0.5">
					<Rectangle Canvas.Left="0" Canvas.Top="1" Width="2" Height="2" Fill="{StaticResource VPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="0" Canvas.Top="5" Width="2" Height="2" Fill="{StaticResource VPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="0" Canvas.Top="9" Width="2" Height="2" Fill="{StaticResource VPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="0" Canvas.Top="13" Width="2" Height="2" Fill="{StaticResource VPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="0" Canvas.Top="17" Width="2" Height="2" Fill="{StaticResource VPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="0" Canvas.Top="0" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
					<Rectangle Canvas.Left="0" Canvas.Top="4" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
					<Rectangle Canvas.Left="0" Canvas.Top="8" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
					<Rectangle Canvas.Left="0" Canvas.Top="12" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
					<Rectangle Canvas.Left="0" Canvas.Top="16" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
				</Canvas>
			</Border>
		</Border>
	</ControlTemplate>

	<ControlTemplate x:Key="HorizontalGridSplitterTemplate">
		<Border Background="{TemplateBinding Panel.Background}" BorderBrush="{TemplateBinding Border.BorderBrush}" BorderThickness="{TemplateBinding Border.BorderThickness}">
			<Border BorderThickness="1,1,0,0">
				<Canvas Width="19" Height="3" Opacity="0.5">
					<Rectangle Canvas.Left="1" Canvas.Top="0" Width="2" Height="2" Fill="{StaticResource HPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="5" Canvas.Top="0" Width="2" Height="2" Fill="{StaticResource HPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="9" Canvas.Top="0" Width="2" Height="2" Fill="{StaticResource HPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="13" Canvas.Top="0" Width="2" Height="2" Fill="{StaticResource HPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="17" Canvas.Top="0" Width="2" Height="2" Fill="{StaticResource HPanelBackgroundBrush}" />
					<Rectangle Canvas.Left="0" Canvas.Top="0" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
					<Rectangle Canvas.Left="4" Canvas.Top="0" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
					<Rectangle Canvas.Left="8" Canvas.Top="0" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
					<Rectangle Canvas.Left="12" Canvas.Top="0" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
					<Rectangle Canvas.Left="16" Canvas.Top="0" Width="2" Height="2" Fill="{TemplateBinding TextElement.Foreground}" />
				</Canvas>
			</Border>
		</Border>
	</ControlTemplate>

	<Style x:Key="VerticalGridSplitterStyle" TargetType="{x:Type GridSplitter}">
		<Setter Property="FrameworkElement.Width" Value="7" />
		<Setter Property="TextElement.Foreground" Value="#FF444444" />
		<Setter Property="Border.BorderBrush" Value="Transparent" />
		<Setter Property="Panel.Background" Value="Transparent" />
		<Setter Property="Border.BorderThickness" Value="0,0,0,0" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="UIElement.Focusable" Value="False" />
		<Setter Property="Control.Padding" Value="7,7,7,7" />
		<Setter Property="ResizeDirection" Value="Columns" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="FrameworkElement.Cursor" Value="SizeWE" />
		<Setter Property="Control.Template" Value="{StaticResource VerticalGridSplitterTemplate}"/>
	</Style>

	<Style x:Key="HorizontalGridSplitterStyle" TargetType="{x:Type GridSplitter}">
		<Setter Property="FrameworkElement.Height" Value="7" />
		<Setter Property="TextElement.Foreground" Value="#FF444444" />
		<Setter Property="Border.BorderBrush" Value="Transparent" />
		<Setter Property="Panel.Background" Value="Transparent" />
		<Setter Property="Border.BorderThickness" Value="0,0,0,0" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="UIElement.Focusable" Value="False" />
		<Setter Property="Control.Padding" Value="7,7,7,7" />
		<Setter Property="ResizeDirection" Value="Rows" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="FrameworkElement.Cursor" Value="SizeNS" />
		<Setter Property="Control.Template" Value="{StaticResource HorizontalGridSplitterTemplate}"/>
	</Style>

	<Style TargetType="{x:Type GridSplitter}">
		<Setter Property="ResizeBehavior" Value="PreviousAndNext"/>
		<Setter Property="TextElement.Foreground" Value="#FF444444" />
		<Setter Property="Border.BorderBrush" Value="Transparent" />
		<Setter Property="Panel.Background" Value="Transparent" />
		<Setter Property="Border.BorderThickness" Value="0,0,0,0" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="UIElement.Focusable" Value="False" />
		<Setter Property="Control.Padding" Value="7,7,7,7" />
		<Style.Triggers>
			<Trigger Property="ResizeDirection" Value="Columns">
				<Setter Property="Template" Value="{StaticResource VerticalGridSplitterTemplate}"/>
				<Setter Property="FrameworkElement.Width" Value="7" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
				<Setter Property="FrameworkElement.Cursor" Value="SizeWE" />
			</Trigger>
			<Trigger Property="ResizeDirection" Value="Rows">
				<Setter Property="Template" Value="{StaticResource HorizontalGridSplitterTemplate}"/>
				<Setter Property="FrameworkElement.Height" Value="7" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="FrameworkElement.Cursor" Value="SizeNS" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="VerticalStatusBarSplitterStyle" TargetType="{x:Type GridSplitter}">
		<Setter Property="FrameworkElement.Width" Value="2" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="UIElement.Focusable" Value="False" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="ResizeDirection" Value="Columns" />
		<Setter Property="FrameworkElement.Cursor" Value="SizeWE" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid Width="2" Height="{TemplateBinding Height}">
						<Rectangle Width="1" Margin="0" HorizontalAlignment="Left" Fill="Black" Opacity="0.1" />
						<Rectangle Width="1" Margin="0" HorizontalAlignment="Right" Fill="White" Opacity="0.7" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="HorizontalStatusBarSplitterStyle" TargetType="{x:Type GridSplitter}">
		<Setter Property="FrameworkElement.Height" Value="2" />
		<Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
		<Setter Property="UIElement.Focusable" Value="False" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="ResizeDirection" Value="Rows" />
		<Setter Property="FrameworkElement.Cursor" Value="SizeNS" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid Width="{TemplateBinding Width}" Height="2">
						<Rectangle Height="1" Margin="0" VerticalAlignment="Top" Fill="Black" Opacity="0.1" />
						<Rectangle Height="1" Margin="0" VerticalAlignment="Bottom" Fill="White" Opacity="0.7" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  BasicStyles: StatusBar  -->

	<Style TargetType="{x:Type StatusBar}">
		<Setter Property="FontFamily" Value="{StaticResource DefaultFont}"/>
		<Setter Property="FontSize" Value="{StaticResource NormalFontSize}"/>
		<Setter Property="Foreground" Value="{StaticResource TextBrush}" />
		<Setter Property="Background" Value="{StaticResource NormalBrush}" />
		<Setter Property="Height" Value="24" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>

	<!--  BasicStyles: Image  -->

	<Style TargetType="{x:Type Image}">
		<!--<Setter Property="Image.Effect">
			<Setter.Value>
				<fx:GrayScaleEffect />
			</Setter.Value>
		</Setter>-->
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.3" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<!--  BasicStyles: ToolBar  -->

	<LinearGradientBrush x:Key="ToolBarBackgroundBrush" PresentationOptions:Freeze="True" StartPoint="0,0.1" EndPoint="0,1">
		<GradientStop Offset="0" Color="#EEE" />
		<!--#ff31bcef-->
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="ToolBarTrayBackgroundBrush" PresentationOptions:Freeze="True" StartPoint="0,0.1" EndPoint="0,1">
		<GradientStop Offset="0" Color="#FEEE" />
		<GradientStop Offset="1" Color="#FEEE" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="ToolbarBorderBrush" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0.0" Color="#FFFFFFFF" />
		<GradientStop Offset="0.15" Color="#FFEFEFEF" />
		<GradientStop Offset="0.85" Color="#FFEFEFEF" />
		<GradientStop Offset="1.0" Color="#FFCCCCCC" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="ToolbarBorderBrushShadow" PresentationOptions:Freeze="True" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0.0" Color="#FFDDDDDD" />
		<GradientStop Offset="1.0" Color="#FFDDDDDD" />
	</LinearGradientBrush>

	<Style TargetType="{x:Type ToolBarTray}">
		<Setter Property="Background" Value="{DynamicResource ToolBarTrayBackgroundBrush}" />
	</Style>

	<Style TargetType="{x:Type ToolBarPanel}">
		<Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType=ToolBar}}" />
	</Style>

	<Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Cursor" Value="SizeAll" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Background="Transparent" UseLayoutRounding="True">
						<Rectangle Margin="2,2,2,4">
							<Rectangle.Fill>
								<DrawingBrush TileMode="Tile" Viewbox="0,0,9,9" ViewboxUnits="Absolute" Viewport="0,0,3,3" ViewportUnits="Absolute">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<DrawingGroup.Children>
												<GeometryDrawing Brush="#BBB" Geometry="M 4 4 L 4 8 L 8 8 L 8 4 z" />
											</DrawingGroup.Children>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Rectangle.Fill>
						</Rectangle>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Margin" Value="-2,0,0,0" />
		<Setter Property="AutomationProperties.AutomationId">
			<Setter.Value>
				<Binding StringFormat="ToolBarOverflowButton{0}" Path="(AutomationProperties.AutomationId)" RelativeSource="{RelativeSource AncestorType=ToolBar}" />
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Name="Bd" Background="Transparent" CornerRadius="0" SnapsToDevicePixels="true">
						<Grid>
							<Path Name="Arrow" Margin="2,3" VerticalAlignment="Bottom" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="Black" />
							<ContentPresenter />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Bd" Property="Background" Value="{StaticResource HoverToolBarBackgroundBrush}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="Bd" Property="Background" Value="{StaticResource HoverToolBarBackgroundBrush}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="Bd" Property="Background" Value="{StaticResource InsetBorderBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="ToolBarStyle" TargetType="{x:Type ToolBar}">
		<Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Background" Value="{StaticResource ToolBarBackgroundBrush}" />
		<Setter Property="Height" Value="30" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolBar}">
					<!--<Border x:Name="Shadow" Margin="1,0,0,0" BorderThickness="0,0,1,0" BorderBrush="{StaticResource ToolbarBorderBrushShadow}" CornerRadius="0">-->
					<Border x:Name="Border" Margin="0"
						        Background="{TemplateBinding Background}"
						        BorderBrush="{StaticResource ToolbarBorderBrush}"
						        BorderThickness="0" 
								CornerRadius="0">
						<DockPanel>
							<ToggleButton ClickMode="Press" DockPanel.Dock="Right" IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarOverflowButtonStyle}">
								<Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false"
									       IsOpen="{Binding Path=IsOverflowOpen,
									                        RelativeSource={RelativeSource TemplatedParent}}"
									       Placement="Bottom" PopupAnimation="Slide" StaysOpen="false">
									<Border x:Name="DropDownBorder" Background="#FDDD" BorderBrush="{StaticResource SolidBorderBrush}" BorderThickness="1" CornerRadius="0">
										<ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2"
											                      FocusVisualStyle="{x:Null}"
											                      Focusable="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"
											                      WrapWidth="200" />
									</Border>
								</Popup>
							</ToggleButton>

							<Thumb x:Name="ToolBarThumb" Width="10" Style="{StaticResource ToolBarThumbStyle}" />
							<ToolBarPanel x:Name="PART_ToolBarPanel" Margin="0,1,2,2" IsItemsHost="true" />
						</DockPanel>
					</Border>
					<!--</Border>-->
					<ControlTemplate.Triggers>
						<Trigger Property="IsOverflowOpen" Value="true">
							<Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
						</Trigger>
						<Trigger Property="ToolBarTray.IsLocked" Value="true">
							<Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ToolBar}" BasedOn="{StaticResource ToolBarStyle}" TargetType="{x:Type ToolBar}" />


	<!--  BasicStyles: ButtonToolBar  -->

	<Style x:Key="ButtonToolBar" BasedOn="{StaticResource ButtonBase}" TargetType="{x:Type Button}">
		<Setter Property="Height" Value="24" />
		<Setter Property="MinWidth" Value="24" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="0">
						<ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" TextBlock.Foreground="{TemplateBinding Foreground}"
										  HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverToolBarBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="Silver" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<!--<Setter Property="Foreground" Value="White" />-->
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  BasicStyles: ButtonToolBarIcon  -->

	<Style x:Key="ButtonToolBarIcon" BasedOn="{StaticResource ButtonBase}" TargetType="{x:Type Button}">
		<Setter Property="Height" Value="24" />
		<Setter Property="Width" Value="24" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="Border"
					        Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="1" CornerRadius="0"
					        Padding="{TemplateBinding Padding}"
					        SnapsToDevicePixels="True">
						<Image x:Name="Content" Source="{TemplateBinding Content}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverToolBarBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HoverToolBarBorderBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  SimpleStyle: ToggleButtonToolBar  -->

	<Style x:Key="ToggleButtonToolBar" BasedOn="{StaticResource ToggleButtonBase}" TargetType="{x:Type ToggleButton}">
		<Setter Property="Height" Value="24" />
		<Setter Property="MinWidth" Value="24" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2" CornerRadius="0">
						<ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverToolBarBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HoverToolBarBorderBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="true" />
								<Condition Property="IsMouseOver" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Opacity" Value="0.8" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--  SimpleStyle: ToggleButtonToolBarIcon  -->

	<Style x:Key="ToggleButtonToolBarIcon" BasedOn="{StaticResource ToggleButtonBase}" TargetType="{x:Type ToggleButton}">
		<Setter Property="Height" Value="24" />
		<Setter Property="Width" Value="24" />
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="Border"
					        Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="2" CornerRadius="0" Padding="2"
					        SnapsToDevicePixels="True">
						<Image x:Name="Content" Source="{TemplateBinding Content}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverToolBarBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource HoverToolBarBorderBrush}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="true" />
								<Condition Property="IsMouseOver" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Opacity" Value="0.8" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  SimpleStyle: ToggleButtonToolBarIconWithArrow  -->

	<Style x:Key="ToggleButtonToolBarIconWithArrow" BasedOn="{StaticResource ToggleButtonBase}" TargetType="{x:Type ToggleButton}">
		<Setter Property="Height" Value="24" />
		<Setter Property="MinWidth" Value="24" />
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="Border"
					        Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="2" CornerRadius="0" Padding="2"
					        SnapsToDevicePixels="True">
						<StackPanel Orientation="Horizontal">
							<Image Name="Image" Width="18" Height="18" VerticalAlignment="Center" Source="{TemplateBinding Content}" />
							<Path Name="Arrow" Height="5" Margin="2,2,2,0" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{DynamicResource GlyphBrush}" />
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource HoverToolBarBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HoverToolBarBorderBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True" />
								<Condition Property="IsChecked" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
							<Setter TargetName="Border" Property="Opacity" Value="0.8" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocused" Value="True" />
								<Condition Property="IsChecked" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
						</MultiTrigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBackgroundBrush}" />
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
							<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Static controls:ToolBar.ComboBoxStyleKey}" BasedOn="{StaticResource ComboBoxBase}" TargetType="{x:Type ComboBox}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Height" Value="24" />
		<Setter Property="MinWidth" Value="24" />
	</Style>
	<Style x:Key="ToolBarButtonStyle" BasedOn="{StaticResource ButtonToolBarIcon}" TargetType="{x:Type Button}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>
	<Style x:Key="{x:Static controls:ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ButtonToolBar}" TargetType="{x:Type Button}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>
	<Style x:Key="ToolBarToggleButtonStyle" BasedOn="{StaticResource ToggleButtonToolBarIcon}" TargetType="{x:Type ToggleButton}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>
	<Style x:Key="ToolBarToggleButtonWithArrowStyle" BasedOn="{StaticResource ToggleButtonToolBarIconWithArrow}" TargetType="{x:Type ToggleButton}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>
	<Style x:Key="{x:Static controls:ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource ToggleButtonToolBar}" TargetType="{x:Type ToggleButton}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>
	<Style x:Key="{x:Static controls:ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource CheckBoxBase}" TargetType="{x:Type CheckBox}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>
	<Style x:Key="{x:Static controls:ToolBar.MenuStyleKey}" BasedOn="{StaticResource MenuStyle}" TargetType="{x:Type Menu}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>
	<Style x:Key="{x:Static controls:ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource ToggleButtonToolBarIcon}" TargetType="{x:Type RadioButton}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>
	<Style x:Key="{x:Static controls:ToolBar.SeparatorStyleKey}" BasedOn="{StaticResource VerticalSeparatorStyle}" TargetType="{x:Type Separator}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Margin" Value="5,3,5,3" />
	</Style>
	<Style x:Key="{x:Static controls:ToolBar.TextBoxStyleKey}" BasedOn="{StaticResource TextBoxBase}" TargetType="{x:Type TextBox}">
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
	</Style>

</ResourceDictionary>